import os

subworkflow prep_db:
    workdir:
        "../0_prep_db/"

checkpoint download:
    input:
        list="data/{dataset}/SRR_Acc_List.txt",
        sh="code/download.sh"
    output:
        dir=directory("data/{dataset}/raw")
    benchmark:
        "benchmarks/{dataset}/download.txt"
    shell:
        "{input.sh} {input.list} {output.dir}"

def get_download_filenames(wildcards):
    dir = checkpoints.download.get(dataset=wildcards.dataset).output.dir
    filenames, = glob_wildcards(os.path.join(dir, "{filename}"))
    return expand("{dir}/{filename}", dir=dir, filename=filenames)

rule names_file:
    input:
        R="code/{dataset}.R",
        files=get_download_filenames
    output:
        file="data/{dataset}/{dataset}.files"
    benchmark:
        "benchmarks/{dataset}/names_file.txt"
    script:
        "{input.R}"

rule preprocess:
    input:
        file=rules.names_file.output.file,
        silva=prep_db("data/silva/silva.bact_v4.fasta"),
        rdp_fasta=prep_db("data/rdp/rdp.fasta"),
        rdp_tax=prep_db("data/rdp/rdp.tax")
    log:
        "logfiles/{dataset}/preprocess.log"
    benchmark:
        "benchmarks/{dataset}/preprocess.txt"
    resources:
        procs=8
    shell:  # TODO: double-check filepaths
        """
        mothur '#set.logfile(name={log}); set.dir(output=data/{wildcards.dataset}/processed);
        	make.contigs(inputdir=data/{wildcards.dataset}/, file={input.file}, processors={resources.procs});
        	screen.seqs(fasta=current, group=current, maxambig=0, maxlength=275, maxhomop=8);
        	unique.seqs();
        	count.seqs(name=current, group=current);
        	align.seqs(fasta=current, reference={input.silva}, processors={resources.procs});
        	screen.seqs(fasta=current, count=current, start=5, end=860);
        	filter.seqs(fasta=current, vertical=T, trump=.);
        	unique.seqs(fasta=current, count=current);
        	pre.cluster(fasta=current, count=current, diffs=2);
        	chimera.uchime(fasta=current, count=current, dereplicate=T);
        	remove.seqs(fasta=current, accnos=current);
        	classify.seqs(fasta=current, count=current, reference={input.rdp_fasta}, taxonomy={input.rdp_tax}, cutoff=80);
        	remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota); '
        """
