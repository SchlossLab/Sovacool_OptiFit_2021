import os

subworkflow prep_db:
    workdir:
        "../0_prep_db/"

wildcards = glob_wildcards("data/{dataset}/SRR_Acc_List.txt")

def get_sra_list(dataset):
    with open(f"data/{dataset}/SRR_Acc_List.txt", 'r') as file:
        sra = [line.strip() for line in file]
    return sra

sra_list = {dataset: get_sra_list(dataset) for dataset in ("human", "marine", "soil")}
seeds = range(10)

for dataset in wildcards.dataset:
    include: f"code/{dataset}.smk"

rule preprocess_targets:
    input:
        expand("results/{dataset}/{dataset}.seed_{seed}.opti_mcc.{ext}", dataset=wildcards.dataset, seed=seeds, ext=('list', 'steps', 'sensspec')),
        [f"data/{dataset}/raw/{sra}_{i}.fastq.gz" for dataset in ("human", "marine", "soil") for sra in sra_list[dataset] for i in (1,2)]

rule download_most:
    input:
        list="data/{dataset}/SRR_Acc_List.txt",
        sh="code/download.sh"
    output:
        fastq=expand("data/{{dataset}}/raw/{{SRA}}_{i}.fastq.gz", i=(1,2))
    benchmark:
        "benchmarks/{dataset}/download_{SRA}.txt"
    params:
        sra="{SRA}",
        outdir="data/{dataset}/raw"
    wildcard_constraints:
        dataset="human|marine|soil"
    shell:
        """
        bash {input.sh} {params.sra} {params.outdir}
        """

rule preprocess:
    input:
        file="data/{dataset}/{dataset}.files",
        silva=prep_db("data/silva/silva.bact_v4.fasta"),
        rdp_fasta=prep_db("data/rdp/rdp.fasta"),
        rdp_tax=prep_db("data/rdp/rdp.tax")
    output:
        filter="data/{dataset}/processed/{dataset}.filter",
        count="data/{dataset}/processed/{dataset}.count_table",
        tax="data/{dataset}/processed/{dataset}.tax",
        fasta="data/{dataset}/processed/{dataset}.fasta"
    params:
        filter="data/{dataset}/temp/{dataset}.filter",
        count="data/{dataset}/temp/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.count_table",
        tax="data/{dataset}/temp/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.pick.rdp.wang.pick.taxonomy",
        fasta="data/{dataset}/temp/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta"
    log:
        "log/{dataset}/preprocess.log"
    benchmark:
        "benchmarks/{dataset}/preprocess.txt"
    resources:
        procs=8
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output=data/{wildcards.dataset}/temp);
            make.contigs(inputdir=data/{wildcards.dataset}/raw, file={input.file}, processors={resources.procs});
            screen.seqs(fasta=current, group=current, maxambig=0, maxlength=275, maxhomop=8);
            unique.seqs();
            count.seqs(name=current, group=current);
            align.seqs(fasta=current, reference={input.silva}, processors={resources.procs});
            screen.seqs(fasta=current, count=current, start=1968, end=11550);
            filter.seqs(fasta=current, vertical=T, trump=.);
            unique.seqs(fasta=current, count=current);
            pre.cluster(fasta=current, count=current, diffs=2);
            chimera.uchime(fasta=current, count=current, dereplicate=T);
            remove.seqs(fasta=current, accnos=current);
            classify.seqs(fasta=current, count=current, reference={input.rdp_fasta}, taxonomy={input.rdp_tax}, cutoff=80);
            remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota); '
        cp {params.count} {output.count}
        cp {params.tax} {output.tax}
        cp {params.fasta} {output.fasta}
        """

rule calc_dists_samples:
    input:
        fasta=rules.preprocess.output.fasta,
    output:
        dist="results/{dataset}/{dataset}.dist"
    log:
        "log/{dataset}/calc_dists.log"
    benchmark:
        "benchmarks/{dataset}/calc_dists.txt"
    resources:
        procs=12,
        walltime_hrs=48
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.dataset}/processed/, output=results/{wildcards.dataset}/);
        dist.seqs(fasta={input.fasta}, cutoff=0.03, processors={resources.procs}) '
        """

rule cluster_samples:
    input:
        dist=rules.calc_dists_samples.output.dist,
        count=rules.preprocess.output.count
    output:
        list="results/{dataset}/{dataset}.seed_{seed}.opti_mcc.list",
        steps="results/{dataset}/{dataset}.seed_{seed}.opti_mcc.steps",
        sensspec="results/{dataset}/{dataset}.seed_{seed}.opti_mcc.sensspec",
        workdir=directory("results/tmp/{dataset}/seed_{seed}/")
    params:
        dist="results/tmp/{dataset}/seed_{seed}/{dataset}.dist",
        count="results/tmp/{dataset}/seed_{seed}/{dataset}.count_table",
        list="results/tmp/{dataset}/seed_{seed}/{dataset}.opti_mcc.list",
        steps="results/tmp/{dataset}/seed_{seed}/{dataset}.opti_mcc.steps",
        sensspec="results/tmp/{dataset}/seed_{seed}/{dataset}.opti_mcc.sensspec"
    log:
        "log/{dataset}/cluster.seed_{seed}.log"
    benchmark:
        "benchmarks/{dataset}/cluster.seed_{seed}.txt"
    shell:
        """
        cp {input.dist} {params.dist}
        cp {input.count} {params.count}
        mothur '#set.logfile(name={log}); set.dir(input={output.workdir}, output={output.workdir});
        set.seed(seed={wildcards.seed});
        cluster(column={params.dist}, count={params.count}, cutoff=0.03) '
        mv {params.list} {output.list}
        mv {params.steps} {output.steps}
        mv {params.sensspec} {output.sensspec}
        """

rule get_otu_reps_samples:
    input:
        list=rules.cluster_samples.output.list,
        count=rules.preprocess.output.count,
        tax=rules.preprocess.output.tax,
        dist=rules.calc_dists_samples.output.dist
    output:
        tax="results/{dataset}/{dataset}.seed_{seed}.opti_mcc.0.03.cons.taxonomy",
        sum="results/{dataset}/{dataset}.seed_{seed}.opti_mcc.0.03.cons.tax.summary",
        count="results/{dataset}/{dataset}.seed_{seed}.opti_mcc.0.03.rep.count_table"
    log:
        "log/{dataset}/get_otu_reps.seed_{seed}.log"
    benchmark:
        "benchmarks/{dataset}/get_otu_reps.seed_{seed}.txt"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output=results/{wildcards.dataset}/);
        classify.otu(list={input.list}, count={input.count}, taxonomy={input.tax}, label=0.03);
        get.oturep(column={input.dist}, list={input.list}, count={input.count}, method=abundance) '
        """