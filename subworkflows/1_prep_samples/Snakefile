import os

subworkflow prep_db:
    workdir:
        "../0_prep_db/"

wildcards = glob_wildcards("data/{dataset}/SRR_Acc_List.txt")

def get_sra_list(dataset):
    with open(f"data/{dataset}/SRR_Acc_List.txt", 'r') as file:
        sra = [line.strip() for line in file]
    return sra

sra_list = {dataset: get_sra_list(dataset) for dataset in ("human", "marine", "soil")}

for dataset in wildcards.dataset:
    include: f"code/{dataset}.smk"

rule preprocess_targets:
    input:
        expand("data/{dataset}/processed/{dataset}.{ext}", dataset=wildcards.dataset, ext=('fasta', 'tax', 'count_table')),
        [f"data/{dataset}/raw/{sra}_{i}.fastq.gz" for dataset in ("human", "marine", "soil") for sra in sra_list[dataset] for i in (1,2)]

rule download_most:
    input:
        list="data/{dataset}/SRR_Acc_List.txt",
        sh="code/download.sh"
    output:
        fastq=expand("data/{{dataset}}/raw/{{SRA}}_{i}.fastq.gz", i=(1,2))
    benchmark:
        "benchmarks/{dataset}/download_{SRA}.txt"
    params:
        sra="{SRA}",
        outdir="data/{dataset}/raw"
    wildcard_constraints:
        dataset="human|marine|soil"
    shell:
        """
        bash {input.sh} {params.sra} {params.outdir}
        """

rule preprocess:
    input:
        file="data/{dataset}/{dataset}.files",
        silva=prep_db("data/silva/silva.bact_v4.fasta"),
        rdp_fasta=prep_db("data/rdp/rdp.fasta"),
        rdp_tax=prep_db("data/rdp/rdp.tax")
    output:
        count="data/{dataset}/processed/{dataset}.count_table",
        tax="data/{dataset}/processed/{dataset}.tax",
        fasta="data/{dataset}/processed/{dataset}.fasta"
    params:
        count="data/{dataset}/temp/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.count_table",
        tax="data/{dataset}/temp/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.pick.rdp.wang.pick.taxonomy",
        fasta="data/{dataset}/temp/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta"
    log:
        "logfiles/{dataset}/preprocess.log"
    benchmark:
        "benchmarks/{dataset}/preprocess.txt"
    resources:
        procs=8
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output=data/{wildcards.dataset}/temp);
        	make.contigs(inputdir=data/{wildcards.dataset}/raw, file={input.file}, processors={resources.procs});
        	screen.seqs(fasta=current, group=current, maxambig=0, maxlength=275, maxhomop=8);
        	unique.seqs();
        	count.seqs(name=current, group=current);
        	align.seqs(fasta=current, reference={input.silva}, processors={resources.procs});
        	screen.seqs(fasta=current, count=current, start=5, end=860);
        	filter.seqs(fasta=current, vertical=T, trump=.);
        	unique.seqs(fasta=current, count=current);
        	pre.cluster(fasta=current, count=current, diffs=2);
        	chimera.uchime(fasta=current, count=current, dereplicate=T);
        	remove.seqs(fasta=current, accnos=current);
        	classify.seqs(fasta=current, count=current, reference={input.rdp_fasta}, taxonomy={input.rdp_tax}, cutoff=80);
        	remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota); '
        cp {params.count} {output.count}
        cp {params.tax} {output.tax}
        cp {params.fasta} {output.fasta}
        """
