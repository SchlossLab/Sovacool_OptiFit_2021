import os

configfile: '../../config/config.yaml'

subworkflow prep_db:
    workdir:
        "../0_prep_db/"

wildcard_constraints:
    seed='\d+'

wildcards = glob_wildcards("data/{dataset}/SRR_Acc_List.txt")

def get_sra_list(dataset):
    with open(f"data/{dataset}/SRR_Acc_List.txt", 'r') as file:
        sra = [line.strip() for line in file]
    return sra

sra_list = {dataset: get_sra_list(dataset) for dataset in ['human', 'marine', 'soil']}

datasets = config['datasets']
seeds = range(1, config['seeds']+1)

for dataset in wildcards.dataset:
    include: f"code/{dataset}.smk"

rule rbind_opticlust:
    input:
        fcns='../../code/R/functions.R',
        R='../../code/R/full_join_tsvs.R',
        tsv=expand("results/{dataset}/cluster/seed_{seed}/results.tsv",
                    dataset = datasets,
                    seed = seeds)
    output:
        tsv='results/opticlust_results.tsv'
    log:
        'log/full_join.txt'
    script:
        '../../code/R/full_join_tsvs.R'

rule fastq_targets:
    input:
        [f"data/{dataset}/raw/{sra}_{i}.fastq.gz" for dataset in ['human', 'marine', 'soil'] for sra in sra_list[dataset] for i in (1,2)]

rule download_most:
    input:
        list="data/{dataset}/SRR_Acc_List.txt",
        sh="code/download.sh"
    output:
        fastq=expand("data/{{dataset}}/raw/{{SRA}}_{i}.fastq.gz", i=(1,2))
    benchmark:
        "benchmarks/{dataset}/download_{SRA}.txt"
    params:
        sra="{SRA}",
        outdir="data/{dataset}/raw"
    wildcard_constraints:
        dataset="human|marine|soil"
    shell:
        """
        bash {input.sh} {params.sra} {params.outdir}
        """

rule preprocess:
    input:
        file="data/{dataset}/{dataset}.files",
        align_db=prep_db("data/silva/silva.bact_v4.fasta"),
        rdp_fasta=prep_db("data/rdp/rdp.fasta"),
        rdp_tax=prep_db("data/rdp/rdp.tax")
    output:
        filter="data/{dataset}/processed/{dataset}.filter",
        count="data/{dataset}/temp/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.count_table",
        tax="data/{dataset}/processed/{dataset}.tax",
        fasta="data/{dataset}/processed/{dataset}.fasta"
    params:
        workdir="data/{dataset}/temp/",
        filter="data/{dataset}/temp/{dataset}.filter",
        tax="data/{dataset}/temp/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.pick.rdp.wang.pick.taxonomy",
        fasta="data/{dataset}/temp/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta",
        trim_contigs='data/{dataset}/temp/{dataset}.trim.contigs.fasta',
        contigs_groups='data/{dataset}/temp/{dataset}.contigs.groups'
    log:
        "log/{dataset}/preprocess.log"
    benchmark:
        "benchmarks/{dataset}/preprocess.txt"
    resources:
        procs=12,
        pmem=8
    shell:
        """
        mothur '#set.logfile(name={log});
            set.dir(input=data/{wildcards.dataset}/raw, output={params.workdir});
            make.contigs(inputdir=data/{wildcards.dataset}/raw, file={input.file}, processors={resources.procs});
            set.dir(input=data/{wildcards.dataset}/raw, output={params.workdir});
            screen.seqs(fasta={params.trim_contigs}, group={params.contigs_groups}, maxambig=0, maxlength=275, maxhomop=8);
            unique.seqs();
            count.seqs(name=current, group=current);
            align.seqs(fasta=current, reference={input.align_db}, processors={resources.procs});
            screen.seqs(fasta=current, count=current, start=1968, end=11550);
            filter.seqs(fasta=current, vertical=T, trump=.);
            unique.seqs(fasta=current, count=current);
            pre.cluster(fasta=current, count=current, diffs=2);
            chimera.uchime(fasta=current, count=current, dereplicate=T);
            remove.seqs(fasta=current, accnos=current);
            classify.seqs(fasta=current, count=current, reference={input.rdp_fasta}, taxonomy={input.rdp_tax}, cutoff=80);
            remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota); '
        cp {params.filter} {output.filter}
        cp {params.tax} {output.tax}
        cp {params.fasta} {output.fasta}
        """

rule mutate_count1:
    input:
        count=rules.preprocess.output.count,
        code="../../code/R/mutate_ref_count.R"
    output:
        count='data/{dataset}/processed/{dataset}.count_table'
    script:
        "../../code/R/mutate_ref_count.R"

def count_seqs(filename):
    with open(filename, 'r') as infile:
        num_seqs = sum(1 for line in infile if line.startswith('>'))
    return num_seqs

rule count_dataset_sizes:
    input:
        fasta=expand('data/{dataset}/processed/{dataset}.fasta', dataset=datasets)
    output:
        txt='results/dataset_sizes.tsv'
    benchmark:
        "benchmarks/count_dataset_sizes.txt"
    run:
        with open(output.txt, 'w') as outfile:
            outfile.write('dataset\tnum_seqs\n')
            for filename in input.fasta:
                num_seqs = count_seqs(filename)
                parameters = filename.split('/')[1].split('_')
                dataset = parameters[0]
                outfile.write(f"{dataset}\t{num_seqs}\n")

rule calc_dists_dataset:
    input:
        fasta=rules.preprocess.output.fasta
    output:
        column="results/{dataset}/{dataset}.dist"
    params:
        outdir="results/{dataset}/"
    log:
        "log/{dataset}/calc_dists.log"
    benchmark:
        "benchmarks/{dataset}/calc_dists.txt"
    resources:
        procs=16
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
            dist.seqs(fasta={input.fasta}, cutoff=0.03, processors={resources.procs}) '
        """

rule cluster_dataset:
    input:
        dist=rules.calc_dists_dataset.output.column,
        count=rules.mutate_count1.output.count
    output:
        list="results/{dataset}/cluster/seed_{seed}/{dataset}.opti_mcc.list",
        steps="results/{dataset}/cluster/seed_{seed}/{dataset}.opti_mcc.steps",
        sensspec='results/{dataset}/cluster/seed_{seed}/{dataset}.opti_mcc.sensspec'
    params:
        outdir="results/{dataset}/cluster/seed_{seed}/"
    log:
        "log/{dataset}/cluster.seed_{seed}.log"
    benchmark:
        "benchmarks/{dataset}/cluster.seed_{seed}.txt"
    resources:
        procs=8
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
        set.seed(seed={wildcards.seed});
        set.current(processors={resources.procs});
        cluster(column={input.dist}, count={input.count}, cutoff=0.03) '
        """

rule calc_diversity1:
    input:
        list=rules.cluster_dataset.output.list,
        count=rules.mutate_count1.output.count
    output:
        tsv="results/{dataset}/cluster/seed_{seed}/{dataset}.opti_mcc.groups.summary"
    params:
        outdir="results/{dataset}/cluster/seed_{seed}/"
    log:
        "log/{dataset}/calc_diversity.seed_{seed}.txt"
    shell:
        """
        mothur "#set.logfile(name={log}); set.dir(output={params.outdir});
        list.seqs(list={input.list});
        get.seqs(count={input.count}, accnos=current);
        make.shared(list={input.list}, count=current, label=0.03);
        summary.single(shared=current, calc=nseqs-sobs-npshannon-invsimpson) "
        """

rule cbind_opticlust_seed:
    input:
        tsv=[rules.cluster_dataset.output.sensspec,
            rules.cluster_dataset.benchmark,
            rules.calc_diversity1.output.tsv],
        code='../../code/R/cbind_opticlust_seed.R'
    output:
        tsv="results/{dataset}/cluster/seed_{seed}/results.tsv"
    benchmark:
        "benchmarks/{dataset}/cbind_opticlust_seed.seed_{seed}.txt"
    script:
        '../../code/R/cbind_opticlust_seed.R'