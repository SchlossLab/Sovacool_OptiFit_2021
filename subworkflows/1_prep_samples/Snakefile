import os

subworkflow prep_db:
    workdir:
        "../0_prep_db/"

wildcards = glob_wildcards("data/{dataset}/SRR_Acc_List.txt")

def get_sra_list(dataset):
    with open(f"data/{dataset}/SRR_Acc_List.txt", 'r') as file:
        sra = [line.strip() for line in file]
    return sra

sra_list = {dataset: get_sra_list(dataset) for dataset in ("human", "marine", "soil")}

datasets=["human", "marine", "mouse", "soil"]
refs=["silva", "rdp", "gg"]
regions=['bact_v4', 'bact_full']

for dataset in wildcards.dataset:
    include: f"code/{dataset}.smk"

rule preprocess_targets:
    input:
        expand('data/{dataset}/{ref}/processed/{dataset}.{region}.fasta', dataset=datasets, ref=refs, region=regions),
        [f"data/{dataset}/raw/{sra}_{i}.fastq.gz" for dataset in ("soil",) for sra in sra_list[dataset] for i in (1,2)]

rule download_most:
    input:
        list="data/{dataset}/SRR_Acc_List.txt",
        sh="code/download.sh"
    output:
        fastq=expand("data/{{dataset}}/raw/{{SRA}}_{i}.fastq.gz", i=(1,2))
    benchmark:
        "benchmarks/{dataset}/download_{SRA}.txt"
    params:
        sra="{SRA}",
        outdir="data/{dataset}/raw"
    wildcard_constraints:
        dataset="human|marine|soil"
    shell:
        """
        bash {input.sh} {params.sra} {params.outdir}
        """

rule preprocess:
    input:
        file="data/{dataset}/{dataset}.files",
        align_db=prep_db("data/{ref}/{ref}.{region}.fasta"),
        rdp_fasta=prep_db("data/rdp/rdp.fasta"),
        rdp_tax=prep_db("data/rdp/rdp.tax")
    output:
        filter="data/{dataset}/{ref}/processed/{dataset}.{region}.filter",
        count="data/{dataset}/{ref}/processed/{dataset}.{region}.count_table",
        tax="data/{dataset}/{ref}/processed/{dataset}.{region}.tax",
        fasta="data/{dataset}/{ref}/processed/{dataset}.{region}.fasta"
    params:
        workdir="data/{dataset}/{ref}/{region}/temp/",
        filter="data/{dataset}/{ref}/{region}/temp/{dataset}.filter",
        count="data/{dataset}/{ref}/{region}/temp/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.count_table",
        tax="data/{dataset}/{ref}/{region}/temp/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.pick.rdp.wang.pick.taxonomy",
        fasta="data/{dataset}/{ref}/{region}/temp/{dataset}.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta",
        trim_contigs='data/{dataset}/{ref}/{region}/temp/{dataset}.trim.contigs.fasta',
        contigs_groups='data/{dataset}/{ref}/{region}/temp/{dataset}.contigs.groups'
    log:
        "log/{dataset}/{ref}/preprocess.{region}.log"
    benchmark:
        "benchmarks/{dataset}/{ref}/preprocess.{region}.txt"
    resources:
        procs=12,
        pmem=8
    shell:
        """
        mothur '#set.logfile(name={log});
            set.dir(input=data/{wildcards.dataset}/raw, output={params.workdir});
            make.contigs(inputdir=data/{wildcards.dataset}/raw, file={input.file}, processors={resources.procs});
            set.dir(input=data/{wildcards.dataset}/raw, output={params.workdir});
            screen.seqs(fasta={params.trim_contigs}, group={params.contigs_groups}, maxambig=0, maxlength=275, maxhomop=8);
            unique.seqs();
            count.seqs(name=current, group=current);
            align.seqs(fasta=current, reference={input.align_db}, processors={resources.procs});
            screen.seqs(fasta=current, count=current, start=1968, end=11550);
            filter.seqs(fasta=current, vertical=T, trump=.);
            unique.seqs(fasta=current, count=current);
            pre.cluster(fasta=current, count=current, diffs=2);
            chimera.uchime(fasta=current, count=current, dereplicate=T);
            remove.seqs(fasta=current, accnos=current);
            classify.seqs(fasta=current, count=current, reference={input.rdp_fasta}, taxonomy={input.rdp_tax}, cutoff=80);
            remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota); '
        cp {params.filter} {output.filter}
        cp {params.count} {output.count}
        cp {params.tax} {output.tax}
        cp {params.fasta} {output.fasta}
        """
