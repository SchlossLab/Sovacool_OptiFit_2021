""" Benchmarking the OptiFit algorithm using subsets of datasets """
import numpy

configfile: 'config/config.yaml'

subworkflow prep_samples:
    workdir:
        "../1_prep_samples/"
    configfile:
        f"{config['configpath']}"

datasets = config['datasets']
methods = config['methods']
printrefs = config['printrefs']
seeds = range(1, config['seeds'] + 1)
random_refweight_options = config['weights']

fracs = config['ref_fracs']
ref_fracs = [i/10 for i in range(fracs['start'], fracs['stop'], fracs['step'])]
sample_fracs_complement = [round(1 - ref_frac, 1) for ref_frac in ref_fracs]

n_runs = numpy.prod([len(param) for param in [datasets, methods, printrefs, seeds, random_refweight_options, sample_fracs_complement]])
print(f"Params will produce {n_runs} optifit runs")

wildcard_constraints:
    seed="\d+"

rule rbind_optifit_split:
    input:
        fcns='code/R/functions.R',
        R='code/R/rbind_tsv.R',
        tsv=[f'results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{round(1 - ref_frac, 1)}/seed_{seed}/fit/method_{method}/printref_{printref}/results.tsv'
            for dataset in datasets
            for ref_weight in random_refweight_options
            for ref_frac in ref_fracs
            for seed in seeds
            for method in methods
            for printref in printrefs]
    output:
        tsv='results/optifit_split_results.tsv'
    log:
        'log/rbind_optifit_split.txt'
    script:
        'code/R/rbind_tsv.R'

rule split_weighted_subsample:
    input:
        code="code/py/split_weighted_subsample.py",
        fasta=prep_samples("data/{dataset}/processed/{dataset}.fasta"),
        count=prep_samples("data/{dataset}/processed/{dataset}.count_table"),
        dist=prep_samples("results/{dataset}/{dataset}.dist")
    output:
        ref_accnos="data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/ref.accnos",
        sample_accnos="data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/sample.accnos",
        all_accnos="data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/{dataset}.accnos"
    log:
        "log/{dataset}/split_weighted_subsample.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    benchmark:
        "benchmarks/{dataset}/split_weighted_subsample.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    script:
        "code/py/split_weighted_subsample.py"

rule prep_subsample_ref:
    input:
        accnos=rules.split_weighted_subsample.output.ref_accnos,
        count=prep_samples("data/{dataset}/processed/{dataset}.count_table"),
        fasta=prep_samples("data/{dataset}/processed/{dataset}.fasta"),
        dist=prep_samples("results/{dataset}/{dataset}.dist")
    output:
        fasta=temp("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/ref/{dataset}.pick.fasta"),
        count=temp("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/ref/{dataset}.pick.count_table"),
        dist=temp("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/ref/{dataset}.pick.dist")
    log:
        "log/{dataset}/prep_subsample_ref.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    params:
        outdir="data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/ref/"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
            get.seqs(accnos={input.accnos}, fasta={input.fasta});
            get.seqs(accnos=current, count={input.count});
            get.dists(accnos=current, column={input.dist}); '
        """

rule combine_for_fit:
    input:
        accnos_ref=rules.split_weighted_subsample.output.ref_accnos,
        accnos_sample=rules.split_weighted_subsample.output.sample_accnos,
        accnos_all=rules.split_weighted_subsample.output.all_accnos,
        count=prep_samples("data/{dataset}/processed/{dataset}.count_table"),
        fasta=prep_samples("data/{dataset}/processed/{dataset}.fasta"),
        dist=prep_samples("results/{dataset}/{dataset}.dist"),
        py="code/py/check_fracs.py"
    output:
        fasta_all=temp("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/{dataset}.pick.fasta"),
        count_all=temp("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/{dataset}.pick.count_table"),
        dist_all=temp("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/{dataset}.pick.dist")
    params:
        outdir="data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/"
    log:
        "log/{dataset}/combine_for_fit.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    shell:
        """
        if $(python3 {input.py} {wildcards.ref_frac} {wildcards.sample_frac}); then
            echo "Copying input files to output files"
            cp {input.fasta} {output.fasta_all}
            cp {input.dist} {output.dist_all}
            cp {input.count} {output.count_all}
        else
            echo "Running mothur to extract sequences"
            mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
                get.seqs(accnos={input.accnos_all}, fasta={input.fasta});
                get.seqs(accnos=current, count={input.count});
                get.dists(accnos=current, column={input.dist}); '
        fi
        """

rule cluster_ref:
    input:
        dist=rules.prep_subsample_ref.output.dist,
        count=rules.prep_subsample_ref.output.count
    output:
        list=temp("results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/cluster/{dataset}.pick.opti_mcc.list"),
        sensspec=temp('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/cluster/{dataset}.pick.opti_mcc.sensspec')
    params:
        outdir="results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/cluster/"
    log:
        "log/{dataset}/cluster.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.log"
    benchmark:
        "benchmarks/{dataset}/cluster.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    resources:
        procs=8
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
        set.seed(seed={wildcards.seed});
        set.current(processors={resources.procs});
        cluster(column={input.dist}, count={input.count}, cutoff=0.03) '
        """

rule pick_best_cluster_seed3:
    input:
        sensspec=expand('results/{{dataset}}/refweight_{{ref_weight}}/reffrac_{{ref_frac}}/samplefrac_{{sample_frac}}/seed_{seed}/cluster/{{dataset}}.pick.opti_mcc.sensspec',
            seed=seeds),
        list=expand("results/{{dataset}}/refweight_{{ref_weight}}/reffrac_{{ref_frac}}/samplefrac_{{sample_frac}}/seed_{seed}/cluster/{{dataset}}.pick.opti_mcc.list",
            seed=seeds),
        code='code/R/pick_best_cluster_seed.R',
        fcns='code/R/functions.R'
    output:
        list="results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/best_seed.opti_mcc.list"
    script:
        'code/R/pick_best_cluster_seed.R'

rule fit_subsample:
    input:
        fasta=rules.combine_for_fit.output.fasta_all,
        count=rules.combine_for_fit.output.count_all,
        column=rules.combine_for_fit.output.dist_all,
        reflist=rules.pick_best_cluster_seed3.output.list
    output:
        sensspec=temp('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/{dataset}.pick.optifit_mcc.sensspec'),
        list=temp('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/{dataset}.pick.optifit_mcc.list')
    params:
        outdir="results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/"
    log:
        "log/{dataset}/fit.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    benchmark:
        "benchmarks/{dataset}/fit.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    resources:
        procs=8
    shell:
        """
        mothur "#set.logfile(name={log}); set.dir(output={params.outdir});
        set.seed(seed={wildcards.seed});
        set.current(processors={resources.procs});
        cluster.fit(reflist={input.reflist}, fasta={input.fasta}, count={input.count}, column={input.column},  printref={wildcards.printref}, method={wildcards.method}) "
        """

rule calc_diversity3:
    input:
        list=rules.fit_subsample.output.list,
        count=rules.combine_for_fit.output.count_all
    output:
        tsv=temp('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/{dataset}.pick.optifit_mcc.groups.summary')
    params:
        outdir="results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/"
    log:
        "log/{dataset}/calc_diversity.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    shell:
        """
        mothur "#set.logfile(name={log}); set.dir(output={params.outdir});
        list.seqs(list={input.list});
        get.seqs(count={input.count}, accnos=current);
        make.shared(list={input.list}, count=current, label=0.03);
        summary.single(shared=current, calc=nseqs-sobs-npshannon-invsimpson) "
        """

rule count_input_sizes:
    input:
        py='code/py/count_input_sizes.py',
        fasta=rules.combine_for_fit.output.fasta_all,
        ref_accnos=rules.split_weighted_subsample.output.ref_accnos,
        sample_accnos=rules.split_weighted_subsample.output.sample_accnos
    output:
        tsv=temp("results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/input_size.tsv")
    script:
        'code/py/count_input_sizes.py'

rule fraction_reads_mapped3:
    input:
        code="code/py/fraction_reads_mapped.py",
        list=rules.fit_subsample.output.list,
        count=rules.split_weighted_subsample.output.sample_accnos
    output:
        txt=temp('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/fraction_reads_mapped.txt')
    script:
        "code/py/fraction_reads_mapped.py"

rule cbind_optifit_seed3:
    input:
        tsv=[rules.fit_subsample.output.sensspec,
            rules.fit_subsample.benchmark,
            rules.calc_diversity3.output.tsv,
            rules.count_input_sizes.output.tsv,
            rules.fraction_reads_mapped3.output.txt],
        code='code/R/cbind_optifit_seed.R',
        fcns='code/R/functions.R'
    output:
        tsv='results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/results.tsv'
    script:
        'code/R/cbind_optifit_seed.R'
