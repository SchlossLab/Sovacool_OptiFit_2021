configfile: '../../config/config.yaml'

datasets = config['datasets']
refs = config['references']
methods = config['methods']

regions = ['bact_v4']
perc_identity = 0.97  # to match mothur's 0.3 dissimilarity threshold

wildcard_constraints:
    region='bact_v4'

subworkflow prep_samples:
    workdir:
        "../1_prep_samples/"
subworkflow fit_ref_db:
    workdir:
        "../2_fit_reference_db/"

rule targets_qiime2_vsearch:
    input:
        expand('results/{dataset}/{method}_ref/{ref}/{region}/feature-table.tsv',
            dataset = datasets,
            method = methods,
            ref = refs,
            region = regions
        ),
        expand('results/{dataset}/de_novo/feature-table.tsv',
            dataset = datasets
        )

rule remove_gaps_query:
    input:
        fna=prep_samples("data/{dataset}/processed/{dataset}.fasta")
    output:
        fna="data/{dataset}/{dataset}.fna"
    shell:
        """
        cat {input.fna} | sed 's/-//g' > {output.fna}
        """

rule import_fasta:
    input:
        fna=rules.remove_gaps_query.output.fna
    output:
        qza="data/{dataset}/{dataset}_seqs.qza"
    conda:
        'config/qiime2-2020.8-py36-linux-conda.yml'
    shell:
        """
        qiime tools import \
            --input-path {input.fna} \
            --output-path {output.qza} \
            --type 'FeatureData[Sequence]'
        """

rule prep_count_table:
    input:
        count=prep_samples("data/{dataset}/processed/{dataset}.count_table"),
        code="code/prep_count_table.R"
    output:
        count='data/{dataset}/{dataset}.count_table',
    script:
        "code/prep_count_table.R"

rule make_biom:
    input:
        count=rules.prep_count_table.output.count
    output:
        biom='data/{dataset}/{dataset}.biom'
    conda:
        'config/qiime2-2020.8-py36-linux-conda.yml'
    shell:
        """
        biom convert -i {input.count} -o {output.biom} --table-type="OTU table" --to-hdf5
        """

rule import_table:
    input:
        biom=rules.make_biom.output.biom
    output:
        qza="data/{dataset}/{dataset}_table.qza"
    params:
        outdir='data/{dataset}/'
    conda:
        'config/qiime2-2020.8-py36-linux-conda.yml'
    shell:
        """
        qiime tools import \
            --input-path {input.biom} \
            --type 'FeatureTable[Frequency]' \
            --input-format BIOMV210Format \
            --output-path {output.qza}
        """

rule remove_gaps_ref:
    input:
        fna=fit_ref_db("data/{dataset}_{ref}_{region}/preclust_db/{ref}.{region}.filter.unique.precluster.fasta")
    output:
        fna="data/{dataset}/{ref}_{region}.fna"
    shell:
        """
        cat {input.fna} | sed 's/-//g' | sed 's/^[^>]*\.//g' > {output.fna}
        """

rule import_ref:
    input:
        fna=rules.remove_gaps_ref.output.fna
    output:
        qza="data/{dataset}/{ref}_{region}_seqs.qza"
    conda:
        'config/qiime2-2020.8-py36-linux-conda.yml'
    shell:
        """
        qiime tools import \
            --input-path {input.fna} \
            --output-path {output.qza} \
            --type 'FeatureData[Sequence]'
        """

rule qiime_de_novo:
    input:
        table=rules.import_table.output.qza,
        seqs=rules.import_fasta.output.qza
    output:
        table='results/{dataset}/de_novo/table.qza',
        seqs='results/{dataset}/de_novo/seqs.qza'
    benchmark:
        'benchmarks/{dataset}/qiime_de_novo.txt'
    params:
        p=perc_identity
    conda:
        'config/qiime2-2020.8-py36-linux-conda.yml'
    shell:
        """
        qiime vsearch cluster-features-de-novo \
            --i-table {input.table} \
            --i-sequences {input.seqs} \
            --p-perc-identity {params.p} \
            --o-clustered-table {output.table} \
            --o-clustered-sequences {output.seqs}
        """

rule qiime_closed_ref:
    input:
        table=rules.import_table.output.qza,
        seqs=rules.import_fasta.output.qza,
        ref=rules.import_ref.output.qza
    output:
        table='results/{dataset}/closed_ref/{ref}/{region}/table.qza',
        seqs='results/{dataset}/closed_ref/{ref}/{region}/seqs.qza',
        unmatched='results/{dataset}/closed_ref/{ref}/{region}/unmatched.qza'
    benchmark:
        'benchmarks/{dataset}/closed_ref.{ref}.{region}.txt'
    params:
        p=perc_identity
    conda:
        'config/qiime2-2020.8-py36-linux-conda.yml'
    shell:
        """
        qiime vsearch cluster-features-closed-reference \
            --i-table {input.table} \
            --i-sequences {input.seqs} \
            --i-reference-sequences {input.ref} \
            --p-perc-identity {params.p} \
            --o-clustered-table {output.table} \
            --o-clustered-sequences {output.seqs} \
            --o-unmatched-sequences {output.unmatched}
        """

rule qiime_open_ref:
    input:
        table=rules.import_table.output.qza,
        seqs=rules.import_fasta.output.qza,
        ref=rules.import_ref.output.qza
    output:
        table='results/{dataset}/open_ref/{ref}/{region}/table.qza',
        seqs='results/{dataset}/open_ref/{ref}/{region}/seqs.qza',
        new='results/{dataset}/open_ref/{ref}/{region}/new.qza'
    benchmark:
        'benchmarks/{dataset}/open_ref.{ref}.{region}.txt'
    params:
        p=perc_identity
    conda:
        'config/qiime2-2020.8-py36-linux-conda.yml'
    shell:
        """
        qiime vsearch cluster-features-open-reference \
            --i-table {input.table} \
            --i-sequences {input.seqs} \
            --i-reference-sequences {input.ref} \
            --p-perc-identity {params.p} \
            --o-clustered-table {output.table} \
            --o-clustered-sequences {output.seqs} \
            --o-new-reference-sequences {output.new}
        """

# TODO: mothur sens.spec on qiime output for performance metrics
# TODO: aggregate benchmarks

rule export_biom:
    input:
        qza="{input_dir}/table.qza"
    output:
        biom="{input_dir}/feature-table.biom",
        tsv="{input_dir}/feature-table.tsv"
    params:
        expdir="{input_dir}/"
    conda:
        'config/qiime2-2020.8-py36-linux-conda.yml'
    shell:
        """
        qiime tools export \
            --input-path {input.qza} \
            --output-path {params.expdir}
        biom convert -i {output.biom} -o {output.tsv} --to-tsv
        """


rule biom_to_list:
    input:
        R="code/biom_to_list.R",
        biom="BIOMFILE"
    output:
        list="LISTFILE"
    script:
        "code/biom_to_list.R"
