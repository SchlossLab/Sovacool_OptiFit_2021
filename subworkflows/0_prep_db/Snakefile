""" Download the reference databases and process with mothur """
seeds = range(10)

wildcard_constraints:
    subset="bact_v4|bact_full",
    ref="silva|rdp|gg"

rule targets:
    input:
        expand("data/{ref}/{ref}.{region}.fasta", ref=("silva", "gg", "rdp"), region=("bact_v4", "bact_full"))

rule download_silva:
    output:
        tar=temp("data/silva/silva.nr_v138.tgz"),
        fasta="data/silva/silva.fasta",
        tax="data/silva/silva.tax"
    params:
        fasta="data/silva/silva.nr_v138.align",  # TODO: change to nr 138 (expect 100k+ seqs)
        tax="data/silva/silva.nr_v138.tax"
    benchmark:
        "benchmarks/silva/download.txt"
    shell:
        """
        source /etc/profile.d/http_proxy.sh  # required for internet on the Great Lakes cluster
        wget -N -P data/silva/ https://mothur.s3.us-east-2.amazonaws.com/wiki/silva.nr_v138.tgz
        tar xzvf {output.tar} -C data/silva/
        mv {params.fasta} {output.fasta}
        mv {params.tax} {output.tax}
        """

rule download_rdp:
    output:
        tar=temp("data/rdp/trainset16_022016.pds.tgz"),
        fasta="data/rdp/rdp.fasta",
        tax="data/rdp/rdp.tax"
    params:
        fasta="data/rdp/trainset16_022016.pds/trainset16_022016.pds.fasta",
        tax="data/rdp/trainset16_022016.pds/trainset16_022016.pds.tax"
    benchmark:
        "benchmarks/rdp/download.txt"
    shell:
        """
        source /etc/profile.d/http_proxy.sh  # required for internet on the Great Lakes cluster
        wget -N -P data/rdp/ https://mothur.s3.us-east-2.amazonaws.com/wiki/trainset16_022016.pds.tgz
        tar xvzf {output.tar} -C data/rdp/
        mv {params.fasta} {output.fasta}
        mv {params.tax} {output.tax}
        rm -rf data/rdp/trainset16_022016.pds/
        """

rule download_gg:
    output:
        fasta="data/gg/gg.fasta",
        tax="data/gg/gg.tax",
        tar_tax=temp("data/gg/gg_13_8_99.taxonomy.tgz"),
        tar_ref=temp("data/gg/gg_13_8_99.refalign.tgz")
    params:
        fasta="data/gg/gg_13_8_99.fasta",
        tax="data/gg/gg_13_8_99.gg.tax"
    benchmark:
        "benchmarks/gg/download.txt"
    shell:
        """
        source /etc/profile.d/http_proxy.sh  # required for internet on the Great Lakes cluster
        wget -N -P data/gg/ https://mothur.s3.us-east-2.amazonaws.com/wiki/gg_13_8_99.taxonomy.tgz
        wget -N -P data/gg/ https://mothur.s3.us-east-2.amazonaws.com/wiki/gg_13_8_99.refalign.tgz
        tar -xzvf {output.tar_tax} -C data/gg/
        tar -xzvf {output.tar_ref} -C data/gg/
        mv {params.fasta} {output.fasta}
        mv {params.tax} {output.tax}
        """

rule get_bacteria:
    input:
        fasta="data/{ref}/{ref}.fasta",
        tax="data/{ref}/{ref}.tax"
    output:
        fasta="data/{ref}/{ref}.bacteria.fasta",
        tax="data/{ref}/{ref}.bacteria.tax"
    params:
        fasta="data/{ref}/{ref}.pick.fasta",
        tax="data/{ref}/{ref}.pick.tax"
    log:
        "log/{ref}/get_bacteria.log"
    benchmark:
        "benchmarks/{ref}/get_bacteria.txt"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/);

        get.lineage(fasta={input.fasta}, taxonomy={input.tax}, taxon=Bacteria);
        summary.seqs(fasta=current);

        rename.file(input={params.fasta}, new={output.fasta});
        rename.file(input={params.tax}, new={output.tax}) '
        """

rule align:
    input:
        fasta=rules.get_bacteria.output.fasta,
        silva=rules.download_silva.output.fasta
    output:
        align="data/{ref}/{ref}.bacteria.align"
    wildcard_constraints:
        ref="rdp|gg"
    resources:
        procs=8
    log:
        "log/{ref}/align.log"
    benchmark:
        "benchmarks/{ref}/align.txt"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/);
        align.seqs(candidate={input.fasta}, template={input.silva}, processors={resources.procs}); '
        """

rule rename_silva_bact:  # needed b/c silva doesn't get aligned to itself
    input:
        "data/silva/silva.bacteria.fasta"
    output:
        align="data/silva/silva.bacteria.align"
    shell:
        "cp {input} {output}"

rule subset_regions:
    input:
        align="data/{ref}/{ref}.bacteria.align" # can't use rules.align.output b/c silva is the alignment template
    output:
        sum="data/{ref}/{ref}.bacteria.summary",
        fasta_full="data/{ref}/{ref}.bact_full.fasta",
        fasta_v4="data/{ref}/{ref}.bact_v4.fasta"
    params:
        screen="data/{ref}/{ref}.bacteria.good.pcr.align"
    resources:
        procs=8
    log:
        "log/{ref}/subset_regions.log"
    benchmark:
        "benchmarks/{ref}/subset_regions.txt"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/);
        summary.seqs(fasta={input.align}, processors={resources.procs});

        screen.seqs(fasta={input.align}, maxambig=0, maxhomop=8, start=11894, end=25319);
        summary.seqs();
        pcr.seqs(fasta=current, start=11894, end=25319, keepdots=F);
        summary.seqs();
        rename.file(input={params.screen}, new={output.fasta_v4});

        screen.seqs(fasta={input.align}, maxambig=0, maxhomop=8, start=1046, end=43116);
        summary.seqs();
        pcr.seqs(fasta=current, start=1046, end=43116, keepdots=F);
        summary.seqs();
        rename.file(input={params.screen}, new={output.fasta_full}) '
        """
