""" Download the reference databases and process with mothur
"""

include: "code/silva.smk"
include: "code/rdp.smk"
include: "code/greengenes.smk"

wildcard_constraints:
    subset="bact_v4|bact_full",
    ref="silva|rdp|gg"

rule targets:
    input:
        expand("results/{ref}/{ref}.{subset}.filter.unique.precluster.opti_mcc.0.03.cons.taxonomy", ref=("silva", "gg", "rdp"), subset=("bact_v4", "bact_full"))

rule get_bacteria:
    input:
        fasta="data/{ref}/{ref}.fasta",
        tax="data/{ref}/{ref}.tax"
    output:
        fasta="data/{ref}/{ref}.bacteria.fasta",
        tax="data/{ref}/{ref}.bacteria.tax"
    log:
        "logfiles/{ref}/get_bacteria.log"
    params:
        fasta="data/{ref}/{ref}.pick.fasta",
        tax="data/{ref}/{ref}.pick.tax"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/);
        get.lineage(fasta={input.fasta}, taxonomy={input.tax}, taxon=Bacteria) '
        mv {params.fasta} {output.fasta}
        mv {params.tax} {output.tax}
        """

rule align:
    input:
        fasta=rules.get_bacteria.output.fasta,
        silva=rules.download_silva.output.fasta
    output:
        align="data/{ref}/{ref}.bacteria.align"
    log:
        "logfiles/{ref}/align.log"
    wildcard_constraints:
        ref="rdp|gg"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/);
        align.seqs(candidate={input.fasta}, template={input.silva}) '
        """

rule subset_regions:
    input:
        align="data/{ref}/{ref}.bacteria.align" # can't use rules.align.output b/c silva is the ref
    output:
        full_length="data/{ref}/{ref}.bact_full.fasta",
        v4="data/{ref}/{ref}.bact_v4.fasta"
    log:
        "logfiles/{ref}/subset_regions.log"
    params:
        screen="data/{ref}/{ref}.bacteria.good.align",
        pcr="data/{ref}/{ref}.bacteria.pcr.align"
    resources:
        procs=8
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/);
        screen.seqs(fasta={input.align}, start=1046, end=43116, processors={resources.procs});
        pcr.seqs(fasta={input.align}, start=11894, end=25319, processors={resources.procs}) '
        mv {params.screen} {output.full_length}
        mv {params.pcr} {output.v4}
        """

rule filter:
    input:
        fasta="data/{ref}/{ref}.{subset}.fasta"
    output:
        filter="data/{ref}/{ref}.{subset}.filter.fasta",
        names="data/{ref}/{ref}.{subset}.filter.names",
        unique="data/{ref}/{ref}.{subset}.filter.unique.fasta",
        preclust_fasta="data/{ref}/{ref}.{subset}.filter.unique.precluster.fasta",
        preclust_count="data/{ref}/{ref}.{subset}.filter.unique.precluster.count_table"
    log:
        "logfiles/{ref}/filter.{subset}.log"
    resources:
        procs=2
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/);
        filter.seqs(fasta={input.fasta}, trump=., vertical=T, processors={resources.procs});
        unique.seqs(fasta={output.filter});
        pre.cluster(fasta={output.unique}, name={output.names}, diffs=2, processors={resources.procs}) '
        """

rule calc_dists:
    input:
        fasta=rules.filter.output.preclust_fasta
    output:
        dist="results/{ref}/{ref}.{subset}.filter.unique.precluster.dist"
    log:
        "logfiles/{ref}/calc_dists.{subset}.log"
    resources:
        procs=12,
        walltime_hrs=48
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/, output=results/{wildcards.ref}/);
        dist.seqs(fasta={input.fasta}, cutoff=0.03, processors={resources.procs}) '
        """

rule cluster:
    input:
        dist=rules.calc_dists.output.dist,
        count=rules.filter.output.preclust_count
    output:
        list="results/{ref}/{ref}.{subset}.filter.unique.precluster.opti_mcc.list",
        steps="results/{ref}/{ref}.{subset}.filter.unique.precluster.opti_mcc.steps",
        sensspec="results/{ref}/{ref}.{subset}.filter.unique.precluster.opti_mcc.sensspec"
    log:
        "logfiles/{ref}/cluster.{subset}.log"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/, output=results/{wildcards.ref}/);
        cluster(column={input.dist}, count={input.count}, cutoff=0.03) '
        """

rule get_otu_reps:
    input:
        fasta=rules.filter.output.preclust_fasta,
        count=rules.filter.output.preclust_count,
        dist=rules.calc_dists.output.dist,
        list=rules.cluster.output.list,
        silva_fasta="data/silva/silva.bacteria.align",
        silva_tax="data/silva/silva.bacteria.tax"
    output:  # TODO: verify taxonomy output filename from classify.seqs
        tax_seq="results/{ref}/{ref}.{subset}.filter.unique.precluster.silva.bacteria.tax",
        tax_otu="results/{ref}/{ref}.{subset}.filter.unique.precluster.opti_mcc.0.03.cons.taxonomy",
        sum="results/{ref}/{ref}.{subset}.filter.unique.precluster.opti_mcc.0.03.cons.tax.summary",
        names="results/{ref}/{ref}.{subset}.filter.unique.precluster.opti_mcc.0.03.rep.names"
    log:
        "logfiles/{ref}/get_otu_reps.{subset}.log"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/, output=results/{wildcards.ref}/);
        classify.seqs(fasta={input.fasta}, template={input.silva_fasta}, taxonomy={input.silva_tax});
        classify.otu(taxonomy={output.tax_seq}, list={input.list}, count={input.count});
        get.oturep(column={input.dist}, list={input.list}, count={input.count}) '
        """
