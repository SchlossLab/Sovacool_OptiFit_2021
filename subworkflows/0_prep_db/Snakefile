""" Download the reference databases and process with mothur
"""

include: "code/silva.smk"
include: "code/rdp.smk"
include: "code/greengenes.smk"

wildcard_constraints:
    subset="bact_v4|bact_full",
    ref="silva|rdp|gg"

rule targets:
    input:
        expand("results/{ref}/{ref}.{region}.filter.unique.precluster.opti_mcc.0.03.cons.taxonomy", ref=("silva", "gg", "rdp"), subset=("bact_v4", "bact_full"))

rule download_silva:
    output:
        tar=temp("data/silva/Silva.seed_v132.tgz"),
        fasta="data/silva/silva.fasta",
        tax="data/silva/silva.tax"
    params:
        fasta="data/silva/silva.seed_v132.align",
        tax="data/silva/silva.seed_v132.tax"
    shell:
        """
        wget -N -P data/silva/ http://www.mothur.org/w/images/7/71/Silva.seed_v132.tgz
        tar xzvf {output.tar} -C data/silva/
        mv {params.fasta} {output.fasta}
        mv {params.tax} {output.tax}
        """

rule download_rdp:
    output:
        tar=temp("data/rdp/Trainset16_022016.pds.tgz"),
        fasta="data/rdp/rdp.fasta",
        tax="data/rdp/rdp.tax"
    params:
        fasta="data/rdp/trainset16_022016.pds/trainset16_022016.pds.fasta",
        tax="data/rdp/trainset16_022016.pds/trainset16_022016.pds.tax"
    shell:
        """
        wget -N -P data/rdp/ https://mothur.org/w/images/c/c3/Trainset16_022016.pds.tgz
        tar xvzf {output.tar} -C data/rdp/
        mv {params.fasta} {output.fasta}
        mv {params.tax} {output.tax}
        rm -rf data/rdp/trainset16_022016.pds/
        """

rule download_gg:
    output:
        fasta="data/gg/gg.fasta",
        tax="data/gg/gg.tax"
    params:
        fasta="data/gg/gg_13_8_99.fasta",
        tax="data/gg/gg_13_8_99.gg.tax"
    shell:
        """
        wget -N -P data/gg/ http://www.mothur.org/w/images/6/68/Gg_13_8_99.taxonomy.tgz
        wget -N -P data/gg/ http://www.mothur.org/w/images/1/19/Gg_13_8_99.refalign.tgz
        tar -xzvf data/gg/Gg_13_8_99.taxonomy.tgz -C data/gg/
        tar -xzvf data/gg/Gg_13_8_99.refalign.tgz -C data/gg/
        mv {params.fasta} {output.fasta}
        mv {params.tax} {output.tax}
        """

rule get_bacteria:
    input:
        fasta="data/{ref}/{ref}.fasta",
        tax="data/{ref}/{ref}.tax"
    output:
        fasta="data/{ref}/{ref}.bacteria.fasta",
        tax="data/{ref}/{ref}.bacteria.tax"
    log:
        "logfiles/{ref}/get_bacteria.log"
    params:
        fasta="data/{ref}/{ref}.pick.fasta",
        tax="data/{ref}/{ref}.pick.tax"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/);
        get.lineage(fasta={input.fasta}, taxonomy={input.tax}, taxon=Bacteria) '
        mv {params.fasta} {output.fasta}
        mv {params.tax} {output.tax}
        """

rule align:
    input:
        fasta=rules.get_bacteria.output.fasta,
        silva=rules.download_silva.output.fasta
    output:
        align="data/{ref}/{ref}.bacteria.align"
    log:
        "logfiles/{ref}/align.log"
    wildcard_constraints:
        ref="rdp|gg"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/);
        align.seqs(candidate={input.fasta}, template={input.silva}) '
        """

rule rename_silva_bact:  # needed b/c silva doesn't get aligned to itself
    input:
        "data/silva/silva.bacteria.fasta"
    output:
        "data/silva/silva.bacteria.align"
    shell:
        "cp {input} {output}"

rule subset_regions:
    input:
        align="data/{ref}/{ref}.bacteria.align" # can't use rules.align.output b/c silva is the template
    output:
        full_length="data/{ref}/{ref}.bact_full.fasta",
        v4="data/{ref}/{ref}.bact_v4.fasta"
    log:
        "logfiles/{ref}/subset_regions.log"
    params:
        screen="data/{ref}/{ref}.bacteria.good.align",
        pcr="data/{ref}/{ref}.bacteria.pcr.align"
    resources:
        procs=8
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/);
        screen.seqs(fasta={input.align}, start=1046, end=43116, processors={resources.procs});
        pcr.seqs(fasta={input.align}, start=11894, end=25319, processors={resources.procs}) '
        mv {params.screen} {output.full_length}
        mv {params.pcr} {output.v4}
        """

rule filter:
    input:
        fasta="data/{ref}/{ref}.{region}.fasta"
    output:
        filter="data/{ref}/{ref}.{region}.filter.fasta",
        names="data/{ref}/{ref}.{region}.filter.names",
        unique="data/{ref}/{ref}.{region}.filter.unique.fasta",
        preclust_fasta="data/{ref}/{ref}.{region}.filter.unique.precluster.fasta",
        preclust_count="data/{ref}/{ref}.{region}.filter.unique.precluster.count_table"
    log:
        "logfiles/{ref}/filter.{region}.log"
    resources:
        procs=2
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/);
        filter.seqs(fasta={input.fasta}, trump=., vertical=T, processors={resources.procs});
        unique.seqs(fasta={output.filter});
        pre.cluster(fasta={output.unique}, name={output.names}, diffs=2, processors={resources.procs}) '
        """

rule calc_dists:
    input:
        fasta=rules.filter.output.preclust_fasta
    output:
        dist="results/{ref}/{ref}.{region}.filter.unique.precluster.dist"
    log:
        "logfiles/{ref}/calc_dists.{region}.log"
    resources:
        procs=12,
        walltime_hrs=48
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/, output=results/{wildcards.ref}/);
        dist.seqs(fasta={input.fasta}, cutoff=0.03, processors={resources.procs}) '
        """

rule cluster:
    input:
        dist=rules.calc_dists.output.dist,
        count=rules.filter.output.preclust_count
    output:
        list="results/{ref}/{ref}.{region}.filter.unique.precluster.opti_mcc.list",
        steps="results/{ref}/{ref}.{region}.filter.unique.precluster.opti_mcc.steps",
        sensspec="results/{ref}/{ref}.{region}.filter.unique.precluster.opti_mcc.sensspec"
    log:
        "logfiles/{ref}/cluster.{region}.log"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/, output=results/{wildcards.ref}/);
        cluster(column={input.dist}, count={input.count}, cutoff=0.03) '
        """

rule get_otu_reps:
    input:
        fasta=rules.filter.output.preclust_fasta,
        count=rules.filter.output.preclust_count,
        dist=rules.calc_dists.output.dist,
        list=rules.cluster.output.list,
        silva_fasta="data/silva/silva.bacteria.align",
        silva_tax="data/silva/silva.bacteria.tax"
    output:  # TODO: verify taxonomy output filename from classify.seqs
        tax_seq="results/{ref}/{ref}.{region}.filter.unique.precluster.silva.bacteria.tax",
        tax_otu="results/{ref}/{ref}.{region}.filter.unique.precluster.opti_mcc.0.03.cons.taxonomy",
        sum="results/{ref}/{ref}.{region}.filter.unique.precluster.opti_mcc.0.03.cons.tax.summary",
        names="results/{ref}/{ref}.{region}.filter.unique.precluster.opti_mcc.0.03.rep.names"
    log:
        "logfiles/{ref}/get_otu_reps.{region}.log"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(input=data/{wildcards.ref}/, output=results/{wildcards.ref}/);
        classify.seqs(fasta={input.fasta}, template={input.silva_fasta}, taxonomy={input.silva_tax});
        classify.otu(taxonomy={output.tax_seq}, list={input.list}, count={input.count});
        get.oturep(column={input.dist}, list={input.list}, count={input.count}) '
        """
