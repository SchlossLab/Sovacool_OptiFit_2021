""" Download the reference databases and process with mothur
"""

mothur = "mothur '#set.dir(input=data/rdp/, output=data/rdp/); set.logfile(name={log}) "

include: "code/silva.smk"
include: "code/rdp.smk"
include: "code/greengenes.smk"

wildcard_constraints:
    subset="bact_v4|bact_full",
    ref="silva|rdp|gg"

rule targets:
    input:
        expand("data/silva/silva.bacteria.{subset}.filter.unique.precluster.opti_mcc.0.03.{ext}", subset=("v4", "good"), ext=("cons.taxonomy", "cons.tax.summary", "rep.names")),
        expand("data/rdp/rdp.{ext}", ext={'tax', 'fasta'})

rule download_rdp:
    output:
        tar=temp("data/rdp/Trainset16_022016.rdp.tgz"),
        fasta="data/rdp/rdp.fasta",
        tax="data/rdp/rdp.tax"
    shell:
        """
        wget -N -P data/rdp/ https://www.mothur.org/w/images/d/dc/Trainset16_022016.rdp.tgz
        tar xvzf {output.tar} -C data/rdp/
        mv data/rdp/trainset16_022016.rdp/trainset16_022016.rdp.fasta {output.fasta}
        mv data/rdp/trainset16_022016.rdp/trainset16_022016.rdp.tax {output.tax}
        rm -rf data/rdp/trainset16_022016.rdp/
        """

rule get_bacteria:
    input:
        fasta="data/{ref}/{ref}.fasta",
        tax="data/{ref}/{ref}.tax"
    output:
        fasta="data/{ref}/{ref}.bacteria.fasta",
        tax="data/{ref}/{ref}.bacteria.tax"
    log:
        "logfiles/{ref}/get_bact.log"
    shell:
        """
        {mothur}
        get.lineage(fasta={input.fasta}, tax={input.tax}, taxon=Bacteria) '
        mv data/{ref}/{ref}.pick.fasta {output.fasta}
        mv data/{ref}/{ref}.pick.tax {output.tax}
        """

rule align_to_silva:
    input:
        fasta=rules.get_bacteria.output.fasta,
        silva_ref=silva("data/silva/silva.seed_v132.align")
    output:
        align="data/{ref}/{ref}.bacteria.align"
    wildcard_constraints:
        ref="rdp|gg"
    shell:
        """
        {mothur}
        align.seqs(candidate={input.fasta}, template={input.silva_ref}) '
        """

rule get_full_length: 
    input:
        align="data/{ref}/{ref}.bacteria.align"
    output:
        fasta="data/{ref}/{ref}.bact_full.fasta"
    shell:
        """
        {mothur}
        screen.seqs(fasta={output.align}, start=1046, end=43116) '
        mv data/{ref}/{ref}.bacteria.good.align {output.fasta}
        """

rule get_v4:
    input:
        fasta=rules.get_bacteria.output.fasta
    output:
        fasta="data/{ref}/{ref}.bact_v4.fasta"
    shell:
        """
        {mothur}
        pcr.seqs(fasta={input.fasta}, start=11894, end=25319, keepdots=F) '
        mv data/{ref}/{ref}.bacteria.pcr.fasta {output.fasta}
        """

rule filter_db:
    input:
        fasta="data/{ref}/{ref}.{subset}.fasta"
    shell:
        """
        {mothur}
        filter.seqs(fasta={input.fasta}, trump=., vertical=T)
        unique.seqs(fasta={output.filter})
        pre.cluster(fasta={output.unique}, name={output.names}, diffs=2) '
        """

rule calc_dists_rdp_full:
    input:
        fasta=rules.get_full_length_rdp_gg.output.preclust_fasta
    output:
        dist="data/rdp/rdp.bacteria.good.filter.unique.precluster.dist"
    shell:
        """
        {mothur}
        dist.seqs(fasta={input.fasta}, cutoff=0.03) '
        """

rule cluster_rdp_full:
    input:
        dist=rules.calc_dists_rdp_full.output.dist,
        names=rules.get_full_length_rdp.output.preclust_names
    output:
        list="data/rdp/rdp.bacteria.good.filter.unique.precluster.opti_mcc.list",
        steps="data/rdp/rdp.bacteria.good.filter.unique.precluster.opti_mcc.steps",
        sensspec="data/rdp/rdp.bacteria.good.filter.unique.precluster.opti_mcc.sensspec"
    shell:
        """
        {mothur}
        cluster(column={input.dist}, name={input.names}, cutoff=0.03) '
        """

rule otu_reps_rdp_full:
    input:
        tax=rules.get_rdp_bact.output.tax,
        list=rules.cluster_rdp_full.output.list,
        names=rules.get_full_length_rdp.output.preclust_names
    output:
        tax="data/rdp/rdp.bacteria.good.filter.unique.precluster.opti_mcc.0.03.cons.taxonomy",
        sum="data/rdp/rdp.bacteria.good.filter.unique.precluster.opti_mcc.0.03.cons.tax.summary",
        names="data/rdp/rdp.bacteria.good.filter.unique.precluster.opti_mcc.0.03.rep.names"
    shell:
        """
        {mothur}
        classify.otu(taxonomy={input.tax}, list={input.list}, name={input.names})
        get.oturep(method=abundance, list={input.list}, name={input.names}) '
        """



rule calc_dists_rdp_v4:
    input:
        fasta=rules.get_rdp_v4.output.preclust_fasta
    output:
        dist="data/rdp/rdp.bact_v4.filter.unique.precluster.dist"
    shell:
        """
        {mothur}
        dist.seqs(fasta={input.fasta}, cutoff=0.03) '
        """

rule cluster_rdp_v4:
    input:
        dist=rules.calc_dists_rdp_v4.output.dist,
        names=rules.get_rdp_v4.output.preclust_names
    output:
        list="data/rdp/rdp.bact_v4.filter.unique.precluster.opti_mcc.list",
        steps="data/rdp/rdp.bact_v4.filter.unique.precluster.opti_mcc.steps",
        sensspec="data/rdp/rdp.bact_v4.filter.unique.precluster.opti_mcc.sensspec"
    shell:
        """
        {mothur}
        cluster(column={input.dist}, name={input.names}, cutoff=0.03) '
        """

rule otu_reps_rdp_v4:
    input:
        tax=rules.get_rdp_bact.output.tax,
        list=rules.cluster_rdp_v4.output.list,
        names=rules.get_rdp_v4.output.preclust_names
    output:
        tax="data/rdp/rdp.bact_v4.filter.unique.precluster.opti_mcc.0.03.cons.taxonomy",
        sum="data/rdp/rdp.bact_v4.filter.unique.precluster.opti_mcc.0.03.cons.tax.summary",
        names="data/rdp/rdp.bact_v4.filter.unique.precluster.opti_mcc.0.03.rep.names"
    shell:
        """
        {mothur}
        classify.otu(taxonomy={input.tax}, list={input.list}, name={input.names})
        get.oturep(method=abundance, list={input.list}, name={input.names}) '
        """
