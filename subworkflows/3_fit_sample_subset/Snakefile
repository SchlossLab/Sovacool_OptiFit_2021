""" Benchmarking the OptiFit algorithm using subsets of datasets """

subworkflow prep_samples:
    workdir:
        "../1_prep_samples/"


datasets = ["human", "marine", "mouse", "soil"]
methods = ['open']#, 'closed']
printrefs=['f']
seeds = range(1, 2)
random_refweight_options = ['simple', 'abundance', 'distance']
ref_fracs = [i/10 for i in range(2,10,2)]

rule subset_targets:
    input:
        expand("data/{dataset}/refweight_{ref_weight}/samplefrac_{sample_frac}/seed_{seed}/ref.accnos", dataset=datasets, ref_weight=random_refweight_options, sample_frac=[0.2], ref_frac=ref_fracs, seed=seeds)

rule split_weighted_subsample:
    input:
        code="../../code/py/split_weighted_subsample.py",
        fasta=prep_samples("data/{dataset}/processed/{dataset}.fasta"),
        count=prep_samples("data/{dataset}/processed/{dataset}.count_table"),
        dist=prep_samples("results/{dataset}/{dataset}.dist")
    output:
        ref_accnos="data/{dataset}/refweight_{ref_weight}/samplefrac_{sample_frac}/seed_{seed}/ref.seed_{seed}.accnos",
        sample_accnos="data/{dataset}/refweight_{ref_weight}/samplefrac_{sample_frac}/seed_{seed}/sample.accnos"
    benchmark:
        "benchmarks/{dataset}/refweight_{ref_weight}/samplefrac_{sample_frac}/seed_{seed}/split_weighted_subsample.txt"
    script:
        "../../code/py/split_weighted_subsample.py"

rule prep_subsample:
    input:
        accnos=rules.split_weighted_subsample.output.ref_accnos,
        fasta=rules.split_weighted_subsample.output.fasta,
        count=rules.split_weighted_subsample.output.count,
        dist=rules.split_weighted_subsample.output.dist
    output:
        fasta="data/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/seed_{seed}/ref.pick.fasta",
        count="data/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/seed_{seed}/ref.pick.count_table",
        dist="data/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/seed_{seed}/ref.pick.dist"
    log:
        "log/{dataset}/prep_subsample.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.seed_{seed}.txt"
    benchmark:
        "benchmarks/{dataset}/prep_subsample.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.seed_{seed}.txt"
    params:
        outdir="data/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/seed_{seed}/"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
            get.seqs(accnos={input.accnos}, fasta={input.fasta});
            get.seqs(accnos=current, count={input.count});
            get.dists(accnos=current, column={input.dist});
        '
        """

rule combine_for_fit:
    input:
        accnos_ref=rules.split_weighted_subsample.ref_accnos,
        accnos_sample=rules.split_weighted_subsample.sample_accnos,
        fasta=rules.prep_subsample.output.fasta,
        count=rules.prep_subsample.output.count,
        dist=rules.prep_subsample.output.dist
    output:
        accnos_all="data/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/{dataset}.accnos",
        fasta_all="data/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/{dataset}.pick.fasta",
        count_all="data/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/{dataset}.pick.count_table",
        dist_all="data/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/{dataset}.pick.dist"
    params:
        outdir="data/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/"
    log:
        "benchmarks/{dataset}/combine_for_fit.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    benchmark:
        "benchmarks/{dataset}/combine_for_fit.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    shell:
        """
        cat {input.accnos_ref} {input.accnos_sample} > {output.accnos_all}
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
            get.seqs(accnos={output.accnos_all}, fasta={input.fasta});
            get.seqs(accnos={input.accnos}, count={input.count});
            get.dists(accnos=current, column={input.dist});
        '
        """

rule cluster_ref:
    input:
        dist=rules.prep_subsample.output.dist,
        count=rules.prep_subsample.output.count
    output:
        list="results/{dataset}/cluster/refweight_{ref_weight}/reffrac_{ref_frac}/seed_{seed}/ref.pick.opti_mcc.list",
        sensspec='results/{dataset}/cluster/refweight_{ref_weight}/reffrac_{ref_frac}/seed_{seed}/ref.pick.opti_mcc.sensspec'
    params:
        outdir="results/{dataset}/cluster/refweight_{ref_weight}/reffrac_{ref_frac}/seed_{seed}/"
    log:
        "log/{dataset}/cluster.refweight_{ref_weight}.reffrac_{ref_frac}.seed_{seed}.log"
    benchmark:
        "benchmarks/{dataset}/cluster.refweight_{ref_weight}.reffrac_{ref_frac}.seed_{seed}.txt"
    resources:
        procs=8
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
        set.seed(seed={wildcards.seed});
        set.current(processors={resources.procs});
        cluster(column={input.dist}, count={input.count}, cutoff=0.03) '
        """

rule fit_subsample:
    input:
        fasta=rules.combine_for_fit.output.fasta_all,
        count=rules.combine_for_fit.output.count_all,
        column=rules.combine_for_fit.output.dist_all,
        reflist=rules.cluster_ref.output.list
    output:
        sensspec='results/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/{dataset}.pick.optifit_mcc.sensspec',
        list='results/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/{dataset}.pick.optifit_mcc.list',
    params:
        outdir="results/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/"
    log:
        "log/{dataset}/fit.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    benchmark:
        "benchmarks/{dataset}/fit.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    resources:
        procs=8
    shell:
        """
        mothur "#set.logfile(name={log}); set.dir(output={params.outdir});
        set.seed(seed={wildcards.seed});
        set.current(processors={resources.procs});
        cluster.fit(reflist={input.reflist}, fasta={input.fasta}, count={input.count}, column={input.column},  printref={wildcards.printref}, method={wildcards.method}) "
        """

### TODO: rules copied from sub 1 & 2 ###

rule reformat_opticlust_results3:  # to make compatible with optifit sensspec & plotting
    input:
        sensspec=rules.cluster_ref.output.sensspec,
        bench=rules.cluster_ref.benchmark,
        code="../../code/R/reformat_opticlust_results.R"
    output:
        sensspec='results/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/cluster/ref.pick.opti_mcc.mod.sensspec',
        bench="benchmarks/{dataset}/cluster.refweight_{ref_weight}.reffrac_{ref_frac}.seed_{seed}.mod.txt"
    benchmark:
        "benchmarks/{dataset}/reformat_opticlust_results.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    params:
        dataset="{dataset}",
        seed="{seed}",
        ref_weight='{ref_weight}',
        ref_frac='{ref_frac}'
    script:  # TODO: make this R Script add ref frac, sample frac, and refweight columns
        "../../code/R/reformat_opticlust_subsample_results.R"


rule reformat_optifit_results3:  # for plotting
    input:
        sensspec=rules.fit_subsample.output.sensspec,
        bench=rules.fit_subsample.benchmark,
        code="../../code/R/reformat_optifit_results.R"
    output:
        sensspec='results/{dataset}/method_{method}/printref_{printref}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/{dataset}.pick.optifit_mcc.mod.sensspec',
        bench="benchmarks/{dataset}/fit.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.mod.txt"
    benchmark:
        "benchmarks/{dataset}/reformat_optifit_results.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    params:
        dataset="{dataset}",
        ref="{ref}",
        seed="{seed}",
        printref='{printref}',
        method='{method}',
        ref_weight='{ref_weight}',
        ref_frac='{ref_frac}',
        sample_frac='{sample_frac}'
    script: # TODO: make this R Script add ref frac, sample frac, and refweight columns
        "../../code/R/reformat_optifit_subsample_results.R"

rule fraction_reads_mapped:
    input:
        code="../../code/py/fraction_reads_mapped.py",
        list=rules.fit_to_ref_db.output.list,
        count=rules.copy_preclust_inputs.output.count
    output:
        txt='results/{dataset}_{ref}_{region}/optifit/method_{method}/printref_{printref}/seed_{seed}/fraction_reads_mapped.txt'
    wildcard_constraints:
        method='closed'
    script:
        "../../code/py/fraction_reads_mapped.py"

rule merge_mapped_stats:
    input:
        expand('results/{dataset}_{ref}_{region}/optifit/method_closed/printref_{printref}/seed_{seed}/fraction_reads_mapped.txt',
        dataset=datasets, ref=refs, region=regions, printref=printrefs, seed=seeds)
    output:
        txt='results/fraction_reads_mapped.tsv'
    shell:
        """
        echo "dataset\tref\tregion\tseed\tmethod\tprintref\tfraction_mapped\n" > {output.txt}
        cat {input} >> {output.txt}
        """

rule merge_results2:
    input:
        sensspec=expand('results/{dataset}_{ref}_{region}/optifit/method_{method}/printref_{printref}/seed_{seed}/{dataset}_{ref}.{region}.all.optifit_mcc.mod.sensspec',
                dataset=datasets, ref=refs, region=regions, seed=seeds, method=methods, printref=printrefs),
        bench=expand('benchmarks/{dataset}_{ref}_{region}/optifit.method_{method}.printref_{printref}.seed_{seed}.mod.txt',
            dataset=datasets, ref=refs, region=regions, seed=seeds, method=methods, printref=printrefs),
        code='../../code/R/merge_results.R'
    output:
        sensspec="results/sensspec.tsv",
        bench="results/benchmarks.tsv"
    benchmark:
        "benchmarks/merge_results.txt"
    script:
        '../../code/R/merge_results.R'
