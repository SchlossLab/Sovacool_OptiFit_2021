""" Benchmarking the OptiFit algorithm using subsets of datasets """
import numpy

configfile: '../../config/config.yaml'

subworkflow prep_samples:
    workdir:
        "../1_prep_samples/"


datasets = config['datasets']
methods = config['methods']
printrefs = config['printrefs']
seeds = range(1, config['seeds'] + 1)
random_refweight_options = config['weights']

fracs = config['ref_fracs']
ref_fracs = [i/10 for i in range(fracs['start'], fracs['stop'], fracs['step'])]
sample_fracs = [0.2]

n_runs = numpy.prod([len(param) for param in [datasets, methods, printrefs, seeds, random_refweight_options, ref_fracs, sample_fracs]])
print(f"Params will produce {n_runs} optifit runs")

wildcard_constraints:
    seed="\d+"

rule subset_targets:
    input:
        "results/sensspec.tsv",
        "results/benchmarks.tsv",
        'results/fraction_reads_mapped.tsv',
        "results/input_sizes.tsv",
        'results/gap_counts.tsv'

rule split_weighted_subsample:
    input:
        code="../../code/py/split_weighted_subsample.py",
        fasta=prep_samples("data/{dataset}/processed/{dataset}.fasta"),
        count=prep_samples("data/{dataset}/processed/{dataset}.count_table"),
        dist=prep_samples("results/{dataset}/{dataset}.dist")
    output:
        ref_accnos="data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/ref.accnos",
        sample_accnos="data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/sample.accnos"
    benchmark:
        "benchmarks/{dataset}/split_weighted_subsample.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    script:
        "../../code/py/split_weighted_subsample.py"

rule prep_subsample_ref:
    input:
        accnos=rules.split_weighted_subsample.output.ref_accnos,
        fasta=prep_samples("data/{dataset}/processed/{dataset}.fasta"),
        count=prep_samples("data/{dataset}/processed/{dataset}.count_table"),
        dist=prep_samples("results/{dataset}/{dataset}.dist")
    output:
        fasta=temp("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/ref/{dataset}.pick.fasta"),
        count=temp("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/ref/{dataset}.pick.count_table"),
        dist=temp("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/ref/{dataset}.pick.dist")
    log:
        "log/{dataset}/prep_subsample_ref.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    benchmark:
        "benchmarks/{dataset}/prep_subsample_ref.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    params:
        outdir="data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/ref/"
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
            get.seqs(accnos={input.accnos}, fasta={input.fasta});
            get.seqs(accnos=current, count={input.count});
            get.dists(accnos=current, column={input.dist}); '
        """

rule combine_for_fit:
    input:
        accnos_ref=rules.split_weighted_subsample.output.ref_accnos,
        accnos_sample=rules.split_weighted_subsample.output.sample_accnos,
        fasta=prep_samples("data/{dataset}/processed/{dataset}.fasta"),
        count=prep_samples("data/{dataset}/processed/{dataset}.count_table"),
        dist=prep_samples("results/{dataset}/{dataset}.dist")
    output:
        accnos_all="data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/{dataset}.accnos",
        fasta_all=temp("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/{dataset}.pick.fasta"),
        count_all=temp("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/{dataset}.pick.count_table"),
        dist_all=temp("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/{dataset}.pick.dist")
    params:
        outdir="data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/"
    log:
        "benchmarks/{dataset}/combine_for_fit.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    benchmark:
        "benchmarks/{dataset}/combine_for_fit.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    shell:
        """
        cat {input.accnos_ref} {input.accnos_sample} > {output.accnos_all}
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
            get.seqs(accnos={output.accnos_all}, fasta={input.fasta});
            get.seqs(accnos=current, count={input.count});
            get.dists(accnos=current, column={input.dist}); '
        """

rule cluster_ref:
    input:
        dist=rules.prep_subsample_ref.output.dist,
        count=rules.prep_subsample_ref.output.count
    output:
        list=temp("results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/cluster/{dataset}.pick.opti_mcc.list"),
        sensspec=temp('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/cluster/{dataset}.pick.opti_mcc.sensspec')
    params:
        outdir="results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/cluster/"
    log:
        "log/{dataset}/cluster.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.log"
    benchmark:
        "benchmarks/{dataset}/cluster.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    resources:
        procs=8
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
        set.seed(seed={wildcards.seed});
        set.current(processors={resources.procs});
        cluster(column={input.dist}, count={input.count}, cutoff=0.03) '
        """

rule fit_subsample:
    input:
        fasta=rules.combine_for_fit.output.fasta_all,
        count=rules.combine_for_fit.output.count_all,
        column=rules.combine_for_fit.output.dist_all,
        reflist=rules.cluster_ref.output.list
    output:
        sensspec=temp('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/{dataset}.pick.optifit_mcc.sensspec'),
        list=temp('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/{dataset}.pick.optifit_mcc.list')
    params:
        outdir="results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/"
    log:
        "log/{dataset}/fit.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    benchmark:
        "benchmarks/{dataset}/fit.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    resources:
        procs=8
    shell:
        """
        mothur "#set.logfile(name={log}); set.dir(output={params.outdir});
        set.seed(seed={wildcards.seed});
        set.current(processors={resources.procs});
        cluster.fit(reflist={input.reflist}, fasta={input.fasta}, count={input.count}, column={input.column},  printref={wildcards.printref}, method={wildcards.method}) "
        """

rule reformat_opticlust_results3:  # to make compatible with optifit sensspec & plotting
    input:
        sensspec=rules.cluster_ref.output.sensspec,
        bench=rules.cluster_ref.benchmark,
        code="../../code/R/reformat_opticlust_results.R"
    output:
        sensspec=temp('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/cluster/{dataset}.pick.opti_mcc.mod.sensspec'),
        bench=temp("benchmarks/{dataset}/cluster.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.mod.txt")
    log:
        "log/{dataset}/reformat_opticlust_results.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    benchmark:
        "benchmarks/{dataset}/reformat_opticlust_results.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    params:
        dataset="{dataset}",
        seed="{seed}",
        ref_weight='{ref_weight}',
        ref_frac='{ref_frac}'
    script:
        "../../code/R/reformat_opticlust_results.R"

rule reformat_optifit_results3:  # for plotting
    input:
        sensspec=rules.fit_subsample.output.sensspec,
        bench=rules.fit_subsample.benchmark,
        code="../../code/R/reformat_optifit_results.R"
    output:
        sensspec=temp('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/{dataset}.pick.optifit_mcc.mod.sensspec'),
        bench=temp("benchmarks/{dataset}/fit.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.mod.txt")
    log:
        "log/{dataset}/reformat_optifit_results.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    benchmark:
        "benchmarks/{dataset}/reformat_optifit_results.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    params:
        dataset="{dataset}",
        ref="NA",
        region="NA",
        seed="{seed}",
        printref='{printref}',
        method='{method}',
        ref_weight='{ref_weight}',
        ref_frac='{ref_frac}',
        sample_frac='{sample_frac}'
    script:
        "../../code/R/reformat_optifit_results.R"

rule fraction_reads_mapped3:
    input:
        code="../../code/py/fraction_reads_mapped.py",
        list=rules.fit_subsample.output.list,
        count=rules.split_weighted_subsample.output.sample_accnos
    output:
        txt=temp('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/fraction_reads_mapped.txt')
    benchmark:
        "benchmarks/{dataset}/fraction_reads_mapped3.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    wildcard_constraints:
        method='closed'
    script:
        "../../code/py/fraction_reads_mapped.py"

rule count_input_sizes:
    input:
        ref_accnos=rules.split_weighted_subsample.output.ref_accnos,
        sample_accnos=rules.split_weighted_subsample.output.sample_accnos
    output:
        tsv=temp("results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/input_size.tsv")
    benchmark:
        "benchmarks/{dataset}/count_input_sizes.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.txt"
    run:
        with open(input.ref_accnos, 'r') as infile:
            num_refs = len(infile.readlines())
        with open(input.sample_accnos, 'r') as infile:
            num_samples = len(infile.readlines())
        with open(output.tsv, 'w') as outfile:
            header = f'dataset\tref_weight\tref_frac\tsample_frac\tseed\tnum_ref_seqs\tnum_sample_seqs\n'
            outfile.write(header)
            data_str = f'{wildcards.dataset}\t{wildcards.ref_weight}\t{wildcards.ref_frac}\t{wildcards.sample_frac}\t{wildcards.seed}\t{num_refs}\t{num_samples}\n'
            outfile.write(data_str)

rule count_gaps:
    input:
        py='../../code/py/count_gaps.py',
        fasta=rules.combine_for_fit.output.fasta_all
    output:
        txt=temp('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/gaps_count.tsv')
    script:
        '../../code/py/count_gaps.py'

rule merge_sensspec:
    input:
        code='../../code/R/merge_results.R',
        fcns='../../code/R/functions.R',
        tsv=expand('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/{dataset}.pick.optifit_mcc.mod.sensspec',
            dataset=datasets, ref_weight=random_refweight_options, ref_frac=ref_fracs, sample_frac=sample_fracs, seed=seeds, method=methods, printref=printrefs)
    output:
        tsv="results/sensspec.tsv"
    log:
        'log/merge_sensspec.tsv'
    benchmark:
        'benchmarks/merge_sensspec.txt'
    script:
        '../../code/R/merge_results.R'

rule merge_benchmarks:
    input:
        code='../../code/R/merge_results.R',
        fcns='../../code/R/functions.R',
        tsv=expand('benchmarks/{dataset}/fit.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.mod.txt',
            dataset=datasets, method=methods, printref=printrefs, ref_weight=random_refweight_options, ref_frac=ref_fracs, sample_frac=sample_fracs, seed=seeds)
    output:
        tsv="results/benchmarks.tsv"
    log:
        'log/merge_benchmarks.tsv'
    benchmark:
        'benchmarks/merge_benchmarks.txt'
    script:
        '../../code/R/merge_results.R'

rule merge_fractions:
    input:
        code='../../code/R/merge_results.R',
        fcns='../../code/R/functions.R',
        tsv=expand('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/fraction_reads_mapped.txt',
            dataset=datasets, method=['closed'], printref=printrefs, ref_weight=random_refweight_options, ref_frac=ref_fracs, sample_frac=sample_fracs, seed=seeds)
    output:
        tsv="results/fraction_reads_mapped.tsv"
    log:
        'log/merge_fractions.tsv'
    benchmark:
        'benchmarks/merge_fractions.txt'
    script:
        '../../code/R/merge_results.R'

rule merge_sizes:
    input:
        code='../../code/R/merge_results.R',
        fcns='../../code/R/functions.R',
        tsv=expand("data/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/input_size.tsv",
            dataset=datasets, ref_weight=random_refweight_options, ref_frac=ref_fracs, sample_frac=sample_fracs, seed=seeds)
    output:
        tsv="results/input_sizes.tsv"
    log:
        'log/merge_sizes.tsv'
    benchmark:
        'benchmarks/merge_sizes.txt'
    script:
        '../../code/R/merge_results.R'

rule merge_gap_counts:
    input:
        code='../../code/R/merge_results.R',
        fcns='../../code/R/functions.R',
        tsv=expand('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/gaps_count.tsv',
            dataset=datasets, ref_weight=random_refweight_options, ref_frac=ref_fracs, sample_frac=sample_fracs, seed=seeds)
    output:
        tsv='results/gap_counts.tsv'
    log:
        'log/merge_gap_counts.tsv'
    script:
        '../../code/R/merge_results.R'

rule merge_all_inputs:
    input:
        expand('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/{dataset}.pick.optifit_mcc.mod.sensspec',
            dataset=datasets, ref_weight=random_refweight_options, ref_frac=ref_fracs, sample_frac=sample_fracs, seed=seeds, method=methods, printref=printrefs),
        expand('benchmarks/{dataset}/fit.method_{method}.printref_{printref}.refweight_{ref_weight}.reffrac_{ref_frac}.samplefrac_{sample_frac}.seed_{seed}.mod.txt',
            dataset=datasets, method=methods, printref=printrefs, ref_weight=random_refweight_options, ref_frac=ref_fracs, sample_frac=sample_fracs, seed=seeds),
        expand('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/fit/method_{method}/printref_{printref}/fraction_reads_mapped.txt',
            dataset=datasets, method=['closed'], printref=printrefs, ref_weight=random_refweight_options, ref_frac=ref_fracs, sample_frac=sample_fracs, seed=seeds),
        expand("results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/input_size.tsv",
            dataset=datasets, ref_weight=random_refweight_options, ref_frac=ref_fracs, sample_frac=sample_fracs, seed=seeds),
        expand('results/{dataset}/refweight_{ref_weight}/reffrac_{ref_frac}/samplefrac_{sample_frac}/seed_{seed}/combined/gaps_count.tsv',
            dataset=datasets, ref_weight=random_refweight_options, ref_frac=ref_fracs, sample_frac=sample_fracs, seed=seeds)
