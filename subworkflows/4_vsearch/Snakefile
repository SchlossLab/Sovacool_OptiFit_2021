"""
Running de novo, open-reference, and closed-reference clustering with vsearch.

vsearch commands adapted from:
- https://github.com/SchlossLab/Schloss_Cluster_PeerJ_2015/blob/master/code/run_vdgc_clust.sh
- https://github.com/qiime2/q2-vsearch/blob/master/q2_vsearch/_cluster_features.py
"""

# config params
configfile: 'config/config.yaml'
datasets = config['datasets']
refs = config['references']
methods = config['methods']

# hard-coded params
regions = ['bact_v4']
perc_identity = 0.97  # to match mothur's 0.3 dissimilarity threshold
min_seq_length = 30 # from Pat's vsearch script
max_accepts = 16
max_rejects = 64

wildcard_constraints:
    region='bact_v4'

subworkflow prep_db:
    workdir:
        "../0_prep_db/"
    configfile:
        config['configpath']
subworkflow prep_samples:
    workdir:
        "../1_prep_samples/"
    configfile:
        config['configpath']

ruleorder: combine_open_lists > uc_to_list > biom_to_list

rule aggregate_vsearch_results:
    input:
        tsv=expand('results/{dataset}/{method}/results.{dataset}.tsv',
                    dataset=datasets,
                    method=methods + ['de_novo']),
        fcns='code/R/functions.R',
        R='code/R/rbind_tsv.R'
    output:
        tsv='results/vsearch_results.tsv'
    script:
        'code/R/rbind_tsv.R'

rule remove_gaps_query:
    input:
        fna=prep_samples("data/{dataset}/processed/{dataset}.fasta")
    output:
        degap=temp("data/{dataset}/{dataset}.tmp.fasta"),
        fna="data/{dataset}/{dataset}.ng.fasta"
    log:
        'log/{dataset}/remove_gaps_query.log'
    params:
        outdir="data/{dataset}/",
        prefix='{dataset}.tmp'
    resources:
        procs=2
    shell:
        """
        mothur '#set.dir(output={params.outdir}); set.logfile(name={log});
            degap.seqs(fasta={input.fna}, processors={resources.procs});
            rename.file(fasta=current, prefix={params.prefix}) '
        # vsearch doesn't support dots or hyphens in fasta headers
        cat {output.degap} | sed 's/[\.-]/_/g' > {output.fna}
        """

rule copy_ref:
    input:
        prep_db("data/gg/gg_13_8_otus/rep_set/97_otus.fasta")
    output:
        fasta='data/ref/gg.fasta'
    shell:
        """
        cp {input} {output}
        """

rule list_ref_seqs:
    input:
        fasta=rules.copy_ref.output.fasta
    output:
        accnos='data/ref/gg.accnos'
    params:
        outdir='data/ref/'
    shell:
        """
        mothur '#set.dir(output={params.outdir});
            list.seqs(fasta={input.fasta}) '
        """

rule vsearch_sort:
    input:
        fna=rules.remove_gaps_query.output.fna
    output:
        fna="data/{dataset}/{dataset}.ng.sorted.fasta",
        uc="data/{dataset}/{dataset}.ng.sorted.uc"
    shell:
        """
        vsearch \
            --derep_fulllength {input.fna} \
            --sizeout \
            --minseqlength 30 \
            --threads 1 \
            --uc {output.uc} \
            --output {output.fna} \
            --strand both
        """

rule vsearch_de_novo:
    input:
        query=rules.vsearch_sort.output.fna
    output:
        uc='results/{dataset}/de_novo/{dataset}.uc'
    benchmark:
        'benchmarks/{dataset}/vsearch.method_de_novo.{dataset}.txt'
    params:
        perc_identity=perc_identity,
        min_seq_length=min_seq_length,
        max_accepts=max_accepts,
        max_rejects=max_rejects
    resources:
        procs=8
    shell:
        """
        vsearch --cluster_smallmem {input.query} \
            --usersort \
            --uc {output.uc} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --minseqlength {params.min_seq_length} \
            --maxaccepts {params.max_accepts} \
            --maxrejects {params.max_rejects} \
            --strand both \
            --relabel OTU_
        """

rule vsearch_closed_ref:
    input:
        query=rules.vsearch_sort.output.fna,
        ref=rules.copy_ref.output.fasta
    output:
        uc='results/{dataset}/closed/{dataset}.uc',
        unmatched='results/{dataset}/closed/{dataset}.unmatched.fasta'
    benchmark:
        'benchmarks/{dataset}/vsearch.method_closed.{dataset}.txt'
    params:
        perc_identity=perc_identity,
        min_seq_length=min_seq_length,
        max_accepts=max_accepts,
        max_rejects=max_rejects
    resources:
        procs=8
    shell:
        """
        vsearch --usearch_global {input.query} \
            --db {input.ref} \
            --notmatched {output.unmatched} \
            --uc {output.uc} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --minseqlength {params.min_seq_length} \
            --maxaccepts {params.max_accepts} \
            --maxrejects {params.max_rejects} \
            --strand both
        """

rule vsearch_open_ref:
    input:
        query=rules.vsearch_sort.output.fna,
        ref=rules.copy_ref.output.fasta
    output:
        closed='results/{dataset}/open/{dataset}.closed.uc',
        unmatched='results/{dataset}/open/{dataset}.unmatched.fasta',
        denovo='results/{dataset}/open/{dataset}.denovo.uc'
    benchmark:
        'benchmarks/{dataset}/vsearch.method_open.{dataset}.txt'
    params:
        perc_identity=perc_identity,
        min_seq_length=min_seq_length,
        max_accepts=max_accepts,
        max_rejects=max_rejects
    resources:
        procs=8
    shell:
        """
        vsearch --usearch_global {input.query} \
            --db {input.ref} \
            --notmatched {output.unmatched} \
            --uc {output.closed} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --minseqlength {params.min_seq_length} \
            --maxaccepts {params.max_accepts} \
            --maxrejects {params.max_rejects} \
            --strand both
        vsearch --cluster_smallmem {output.unmatched} \
            --usersort \
            --uc {output.denovo} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --minseqlength {params.min_seq_length} \
            --maxaccepts {params.max_accepts} \
            --maxrejects {params.max_rejects} \
            --strand both \
            --relabel OTU_
        """

rule uc_to_list:
    input:
        code='code/R/uc_to_list.R',
        sorted=rules.vsearch_sort.output.uc,
        clustered='results/{dataset}/{method}/{dataset_step}.uc'
    output:
        list='results/{dataset}/{method}/{dataset_step}.list'
    script:
        'code/R/uc_to_list.R'

rule biom_to_list:
    input:
        code="code/R/biom_to_list.R",
        biom="results/{dataset}/{method}/{dataset_step}.biom"
    output:
        list="results/{dataset}/{method}/{dataset_step}.list"
    script:
        "code/R/biom_to_list.R"

rule combine_open_lists:
    input:
        l1='results/{dataset}/open/{dataset}.closed.list',
        l2='results/{dataset}/open/{dataset}.denovo.list',
        py='code/py/combine_open_lists.py'
    output:
        list='results/{dataset}/open/{dataset}.list'
    script:
        'code/py/combine_open_lists.py'

# vsearch doesn't support dots or hyphens in sequence names.
rule prep_count_table:
    input:
        count=prep_samples("data/{dataset}/processed/{dataset}.count_table")
    output:
        count='data/{dataset}/{dataset}.count_table'
    shell:
        """
        cat {input.count} |  sed 's/[\.-]/_/g' > {output.count}
        """

# replace dots/hyphens in fasta headers (1st & 2nd occurrence),
# but not in the distance value (3rd occurrence).
rule prep_dist:
    input:
        dist=prep_samples("results/{dataset}/{dataset}.dist")
    output:
        dist='data/{dataset}/{dataset}.dist'
    shell:
        """
        cat {input.dist} |  sed 's/[\.-]/_/' | sed 's/[\.-]/_/' > {output.dist}
        """

rule sensspec_vsearch:
    input:
        list="results/{dataset}/{method}/{dataset}.list",
        count=rules.prep_count_table.output.count,
        dist=rules.prep_dist.output.dist
    output:
        tsv='results/{dataset}/{method}/{dataset}.sensspec'
    params:
        outdir='results/{dataset}/{method}/'
    log:
        'log/{dataset}/sensspec.method_{method}.{dataset}.txt'
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
            sens.spec(list={input.list}, count={input.count}, column={input.dist}) '
        """

rule calc_diversity4:
    input:
        list="results/{dataset}/{method}/{dataset}.list",
        count=rules.prep_count_table.output.count,
    output:
        list_accnos="results/{dataset}/{method}/{dataset}.accnos",
        tsv='results/{dataset}/{method}/{dataset}.groups.summary'
    params:
        outdir="results/{dataset}/{method}/"
    log:
        "log/{dataset}/calc_diversity.{dataset}.method_{method}.txt"
    shell:
        """
        mothur "#set.logfile(name={log}); set.dir(output={params.outdir});
        list.seqs(list={input.list});
        get.seqs(count={input.count}, accnos=current);
        make.shared(list={input.list}, count=current, label=0.03);
        summary.single(shared=current, calc=nseqs-sobs-shannon-invsimpson) "
        """

rule fraction_reads_mapped4:
    input:
        code="code/py/fraction_mapped_vsearch.py",
        mapped=rules.calc_diversity4.output.list_accnos,
        query=rules.prep_count_table.output.count,
        ref=rules.list_ref_seqs.output.accnos
    output:
        txt='results/{dataset}/{method}/fraction-mapped_{dataset}.txt'
    script:
        "code/py/fraction_mapped_vsearch.py"

rule reformat_vsearch_results:
    input:
        R="code/R/reformat_vsearch_results.R",
        fcns='code/R/functions.R',
        bench='benchmarks/{dataset}/vsearch.method_{method}.{dataset}.txt',
        sensspec=rules.sensspec_vsearch.output.tsv,
        div=rules.calc_diversity4.output.tsv,
        map=rules.fraction_reads_mapped4.output.txt
    output:
        tsv='results/{dataset}/{method}/results.{dataset}.tsv'
    script:
        "code/R/reformat_vsearch_results.R"

