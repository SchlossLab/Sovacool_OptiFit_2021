"""
Running de novo, open-reference, and closed-reference clustering with vsearch.

vsearch commands adapted from:
- https://github.com/SchlossLab/Schloss_Cluster_PeerJ_2015/blob/master/code/run_vdgc_clust.sh
- https://github.com/qiime2/q2-vsearch/blob/master/q2_vsearch/_cluster_features.py
"""

# config params
configfile: 'config/config.yaml'
datasets = ['miseq_1.0_01', 'mouse']# config['datasets']
refs = config['references']
methods = config['methods']

# hard-coded params, same as used in Pat's 2015 PeerJ paper
perc_identity = 0.97  # to match mothur's 0.3 dissimilarity threshold
min_seq_length = 30
max_accepts = 16
max_rejects = 64
word_length = 8 # the default value of wordlength is already 8 but I'm paranoid

subworkflow prep_db:
    workdir:
        "../0_prep_db/"
    configfile:
        config['configpath']
subworkflow prep_samples:
    workdir:
        "../1_prep_samples/"
    configfile:
        config['configpath']

rule aggregate_vsearch_results:
    input:
        tsv=expand('results/{dataset}/{method}/results.{dataset}.tsv',
                    dataset=datasets,
                    method=methods + ['de_novo']),
        fcns='code/R/functions.R',
        R='code/R/rbind_tsv.R',
        sanity_checks=expand('results/{dataset}/closed/fraction_mapped_sanity_check.txt', dataset=datasets)
    output:
        tsv='results/vsearch_results.tsv'
    script:
        'code/R/rbind_tsv.R'

# some mothur commands don't like hyphens in file paths
'''
rule copy_query_files:
    input:
        fna=prep_samples("data/{dataset}/processed/{dataset}.fasta"),
        count_table=prep_samples("data/{dataset}/processed/{dataset}.count_table"),
        dist=prep_samples("results/{dataset}/{dataset}.dist")
    output:
        fna='data/{dataset}/input/{dataset}.fasta',
        count_table='data/{dataset}/input/{dataset}.count_table'
    params:
        outdir='data/{dataset}/input/'
    shell:
        """
        for f in {input}; do
            cp $f {params.outdir}
        done
        """
'''
rule deunique:
    input:
        fna='data/{dataset}/input/{dataset}.fasta',
        count_table='data/{dataset}/input/{dataset}.count_table'
    output:
        redund='data/{dataset}/processed/{dataset}.redundant.fasta',
        rename='data/{dataset}/processed/{dataset}.redundant.renamed.fasta'
    log:
        'log/{dataset}/deunique.log'
    params:
        outdir='data/{dataset}/processed'
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
            deunique.seqs(fasta={input.fna}, count={input.count_table})
            '
        sed "s/_/-/g" < {output.redund} > {output.rename}
        """

rule degap:
    input:
        fna=rules.deunique.output.rename
    output:
        fna="data/{dataset}/processed/{dataset}.ng.fasta",
        count_table='data/{dataset}/processed/{dataset}.ng.count_table',
        dist='data/{dataset}/processed/{dataset}.ng.dist'
    log:
        'log/{dataset}/degap.log'
    params:
        outdir="data/{dataset}/processed/",
        prefix='{dataset}.ng',
        cutoff=0.03
    resources:
        procs=16
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
            unique.seqs(fasta={input.fna});
            count.seqs(fasta=current);
            dist.seqs(fasta=current, processors={resources.procs}, cutoff={params.cutoff});
            degap.seqs(fasta={input.fna});
            rename.file(fasta=current, count=current, column=current, prefix={params.prefix})
            '
        """

rule copy_ref:
    input:
        prep_db("data/gg/gg_13_8_otus/rep_set/97_otus.fasta")
    output:
        fasta='data/ref/gg.fasta'
    shell:
        """
        cp {input} {output}
        """

rule list_ref_seqs:
    input:
        fasta=rules.copy_ref.output.fasta
    output:
        accnos='data/ref/gg.accnos'
    log:
        'log/list_ref_seqs.log'
    params:
        outdir='data/ref/'
    shell:
        """
        mothur '#set.dir(output={params.outdir}); set.logfile(name={log});
            list.seqs(fasta={input.fasta}) '
        """

rule vsearch_sort:
    input:
        fna="data/{dataset}/processed/{dataset}.ng.fasta"
    output:
        fna="data/{dataset}/{dataset}.ng.sorted.fasta",
        uc="data/{dataset}/{dataset}.ng.sorted.uc"
    shell:
        """
        vsearch \
            --derep_fulllength {input.fna} \
            --sizeout \
            --minseqlength 30 \
            --threads 1 \
            --uc {output.uc} \
            --output {output.fna} \
            --strand both
        """

rule vsearch_de_novo:
    input:
        query=rules.vsearch_sort.output.fna
    output:
        uc='results/{dataset}/de_novo/{dataset}.uc'
    benchmark:
        'benchmarks/{dataset}/vsearch.method_de_novo.{dataset}.txt'
    params:
        perc_identity=perc_identity,
        min_seq_length=min_seq_length,
        max_accepts=max_accepts,
        max_rejects=max_rejects,
        word_length=word_length
    resources:
        procs=8
    shell:
        """
        vsearch --cluster_smallmem {input.query} \
            --usersort \
            --uc {output.uc} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --minseqlength {params.min_seq_length} \
            --maxaccepts {params.max_accepts} \
            --maxrejects {params.max_rejects} \
            --wordlength {params.word_length} \
            --strand both
        """

rule vsearch_closed_ref:
    input:
        query=rules.vsearch_sort.output.fna,
        ref=rules.copy_ref.output.fasta
    output:
        uc='results/{dataset}/closed/{dataset}.uc',
        unmatched='results/{dataset}/closed/{dataset}.unmatched.fasta'
    benchmark:
        'benchmarks/{dataset}/vsearch.method_closed.{dataset}.txt'
    params:
        perc_identity=perc_identity,
        min_seq_length=min_seq_length,
        max_accepts=max_accepts,
        max_rejects=max_rejects,
        word_length=word_length
    resources:
        procs=8
    shell:
        """
        vsearch --usearch_global {input.query} \
            --db {input.ref} \
            --notmatched {output.unmatched} \
            --uc {output.uc} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --minseqlength {params.min_seq_length} \
            --maxaccepts {params.max_accepts} \
            --maxrejects {params.max_rejects} \
            --wordlength {params.word_length} \
            --strand both
        """

rule vsearch_open_ref:
    input:
        query=rules.vsearch_sort.output.fna,
        ref=rules.copy_ref.output.fasta
    output:
        closed='results/{dataset}/open/{dataset}.closed.uc',
        unmatched='results/{dataset}/open/{dataset}.unmatched.fasta',
        denovo='results/{dataset}/open/{dataset}.de_novo.uc'
    benchmark:
        'benchmarks/{dataset}/vsearch.method_open.{dataset}.txt'
    params:
        perc_identity=perc_identity,
        min_seq_length=min_seq_length,
        max_accepts=max_accepts,
        max_rejects=max_rejects,
        word_length=word_length
    resources:
        procs=8
    shell:
        """
        vsearch --usearch_global {input.query} \
            --db {input.ref} \
            --notmatched {output.unmatched} \
            --uc {output.closed} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --minseqlength {params.min_seq_length} \
            --maxaccepts {params.max_accepts} \
            --maxrejects {params.max_rejects} \
            --wordlength {params.word_length} \
            --strand both
        vsearch --cluster_smallmem {output.unmatched} \
            --usersort \
            --uc {output.denovo} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --minseqlength {params.min_seq_length} \
            --maxaccepts {params.max_accepts} \
            --maxrejects {params.max_rejects} \
            --wordlength {params.word_length} \
            --strand both
        """

rule denovo_uc_to_list:
    input:
        code='code/R/denovo_uc_to_list.R',
        sorted=rules.vsearch_sort.output.uc,
        clustered=rules.vsearch_de_novo.output.uc
    output:
        list='results/{dataset}/de_novo/{dataset}.list'
    shell:
        'Rscript {input.code} {input.sorted} {input.clustered} {output.list}'

rule closed_uc_to_list:
    input:
        code='code/R/closed_uc_to_list.R',
        sorted=rules.vsearch_sort.output.uc,
        clustered=rules.vsearch_closed_ref.output.uc
    output:
        list='results/{dataset}/closed/{dataset}.list'
    shell:
        'Rscript {input.code} {input.sorted} {input.clustered} {output.list}'

rule open_uc_to_list:
    input:
        sorted=rules.vsearch_sort.output.uc,
        R_closed='code/R/closed_uc_to_list.R',
        uc_closed=rules.vsearch_open_ref.output.closed,
        R_denovo='code/R/denovo_uc_to_list.R',
        uc_denovo=rules.vsearch_open_ref.output.denovo,
        py='code/py/combine_open_lists.py'
    output:
        list_closed='results/{dataset}/open/{dataset}.closed.list',
        list_denovo='results/{dataset}/open/{dataset}.de_novo.list',
        list_combined='results/{dataset}/open/{dataset}.list'
    shell:
        """
        Rscript {input.R_closed} {input.sorted} {input.uc_closed} {output.list_closed}
        Rscript {input.R_denovo} {input.sorted} {input.uc_denovo} {output.list_denovo}
        python {input.py} {output.list_closed} {output.list_denovo} {output.list_combined}
        """

rule sensspec_vsearch:
    input:
        list="results/{dataset}/{method}/{dataset}.list",
        #names="data/{dataset}/processed/{dataset}.ng.names",
        count_table="data/{dataset}/processed/{dataset}.ng.count_table",
        dist="data/{dataset}/processed/{dataset}.ng.dist"
    output:
        query_accnos="results/{dataset}/{method}/{dataset}.ng.accnos",
        list_accnos="results/{dataset}/{method}/{dataset}.userLabel.pick.accnos",
        list="results/{dataset}/{method}/{dataset}.userLabel.pick.list",
        tsv='results/{dataset}/{method}/{dataset}.userLabel.pick.sensspec'
    params:
        outdir='results/{dataset}/{method}/',
        label='userLabel',
        cutoff=0.03
    log:
        'log/{dataset}/sensspec.method_{method}.{dataset}.txt'
    shell:
        """
        mothur '#set.logfile(name={log});
            set.dir(output={params.outdir});
            list.seqs(count={input.count_table});
            get.seqs(list={input.list}, accnos=current);
            list.seqs(list=current);
            sens.spec(list=current, count=current, column={input.dist}, label={params.label}, cutoff={params.cutoff})
            '
        """

rule summary:
    input:
        list="results/{dataset}/{method}/{dataset}.list"
    output:
        tsv='results/{dataset}/{method}/{dataset}.list.summary'
    params:
        outdir='results/{dataset}/{method}/'
    log:
        'log/summary.single.{dataset}.{method}.log'
    shell:
        """
        mothur "#set.logfile(name={log});
                set.dir(output={params.outdir});
                summary.single(list={input.list}, calc=sobs)
                "
        """

rule fraction_reads_mapped4:
    input:
        code="code/py/fraction_mapped_vsearch.py",
        query=rules.sensspec_vsearch.output.query_accnos,
        mapped=rules.sensspec_vsearch.output.list_accnos,
    output:
        tsv='results/{dataset}/{method}/fraction_mapped_{dataset}.tsv'
    script:
        "code/py/fraction_mapped_vsearch.py"

rule fraction_map_sanity_check:
    input:
        code="code/py/fraction_mapped_sanity_check.py",
        query=rules.vsearch_sort.output.fna,
        unmapped=rules.vsearch_closed_ref.output.unmatched,
        tsv=rules.fraction_reads_mapped4.output.tsv
    output:
        txt='results/{dataset}/{method}/fraction_mapped_sanity_check.txt'
    script:
        "code/py/fraction_mapped_sanity_check.py"

rule reformat_vsearch_results:
    input:
        R="code/R/reformat_vsearch_results.R",
        fcns='code/R/functions.R',
        bench='benchmarks/{dataset}/vsearch.method_{method}.{dataset}.txt',
        sensspec=rules.sensspec_vsearch.output.tsv,
        map=rules.fraction_reads_mapped4.output.tsv,
        summary=rules.summary.output.tsv
    output:
        tsv='results/{dataset}/{method}/results.{dataset}.tsv'
    script:
        "code/R/reformat_vsearch_results.R"

