configfile: '../../config/config.yaml'

datasets = config['datasets']
refs = config['references']
methods = config['methods']

regions = ['bact_v4']
perc_identity = 0.97  # to match mothur's 0.3 dissimilarity threshold

wildcard_constraints:
    region='bact_v4'

subworkflow prep_samples:
    workdir:
        "../1_prep_samples/"
subworkflow fit_ref_db:
    workdir:
        "../2_fit_reference_db/"

rule aggregate_vsearch_results:
    input:
        tsv=[expand('results/{dataset}/de_novo/results.{dataset}.tsv',
                 dataset=datasets) +
             expand('results/{dataset}/{method}/results.{dataset}_{ref}_{region}.tsv',
                 dataset=datasets,
                 method=methods,
                 ref=refs,
                 region=regions)],
        fcns='../../code/R/functions.R',
        R='../../code/R/merge_results.R'
    output:
        tsv='results/vsearch_results.tsv'
    script:
        '../../code/R/merge_results.R'

rule remove_gaps_query:
    input:
        fna=prep_samples("data/{dataset}/processed/{dataset}.fasta")
    output:
        degap=temp("data/{dataset}/{dataset}.tmp.fasta"),
        fna="data/{dataset}/{dataset}.ng.fasta"
    params:
        outdir="data/{dataset}/",
        prefix='{dataset}.tmp'
    resources:
        procs=4
    shell:
        """
        mothur '#set.dir(output={params.outdir});
            degap.seqs(fasta={input.fna}, processors={resources.procs});
            rename.file(fasta=current, prefix={params.prefix}) '
        # vsearch doesn't support dots in fasta headers
        cat {output.degap} | sed 's/\./_/g' > {output.fna}
        """

rule remove_gaps_ref:
    input:
        fna=fit_ref_db("data/{dataset}_{ref}_{region}/preclust_db/{ref}.{region}.filter.unique.precluster.fasta")
    output:
        degap=temp("data/{dataset}/{ref}_{region}.tmp.fasta"),
        fna="data/{dataset}/{ref}_{region}.ng.fasta"
    params:
        outdir="data/{dataset}/",
        prefix='{ref}_{region}.tmp'
    resources:
        procs=4
    shell:
        """
        mothur '#set.dir(output={params.outdir});
            degap.seqs(fasta={input.fna}, processors={resources.procs});
            rename.file(fasta=current, prefix={params.prefix}) '
        # vsearch doesn't support dots in fasta headers
        cat {output.degap} | sed 's/\./_/g' > {output.fna}
        """

rule prep_count_table_mothur:
    input:
        count=prep_samples("data/{dataset}/processed/{dataset}.count_table"),
        code="../../code/R/mutate_ref_count.R"
    output:
        count='data/{dataset}/{dataset}.dummyRefGroup.count_table'
    script:
        "../../code/R/mutate_ref_count.R"

rule vsearch_de_novo:
    input:
        query=rules.remove_gaps_query.output.fna
    output:
        biom='results/{dataset}/de_novo/{dataset}.biom'
    benchmark:
        'benchmarks/{dataset}/vsearch.method_de_novo.{dataset}.txt'
    params:
        perc_identity=perc_identity
    resources:
        procs=8
    shell:
        """
        vsearch --cluster_size {input.query} \
            --biomout {output.biom} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --relabel OTU_ \
            --qmask none \
            --xsize \
            --minseqlength 1 \
            --fasta_width 0 \
        """

rule vsearch_closed_ref:
    input:
        query=rules.remove_gaps_query.output.fna,
        ref=rules.remove_gaps_ref.output.fna
    output:
        biom='results/{dataset}/closed/{datset}_{ref}_{region}.biom',
        unmatched='results/{dataset}/closed/{datset}_{ref}_{region}.unmatched.fasta'
    benchmark:
        'benchmarks/{dataset}/vsearch.method_closed.{datset}_{ref}_{region}.txt'
    params:
        perc_identity=perc_identity
    resources:
        procs=8
    shell:
        """
        vsearch --usearch_global {input.query} \
            --db {input.ref} \
            --biomout {output.biom} \
            --notmatched {output.unmatched} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --relabel OTU_ \
            --qmask none \
            --xsize \
            --minseqlength 1 \
            --fasta_width 0
        """

rule vsearch_open_ref: # TODO: concatentated biom file from closed & denovo
    input:
        query=rules.remove_gaps_query.output.fna,
        ref=rules.remove_gaps_ref.output.fna
    output:
        closed='results/{dataset}/open/{datset}_{ref}_{region}.closed.biom',
        unmatched='results/{dataset}/open/{datset}_{ref}_{region}.unmatched.fasta',
        denovo='results/{dataset}/open/{datset}_{ref}_{region}.denovo.biom'
    benchmark:
        'benchmarks/{dataset}/vsearch.method_open.{datset}_{ref}_{region}.txt'
    params:
        perc_identity=perc_identity
    resources:
        procs=8
    shell:
        """
        vsearch --usearch_global {input.query} \
            --db {input.ref} \
            --biomout {output.closed} \
            --notmatched {output.unmatched} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --qmask none \
            --dbmask none \
            --xsize \
            --minseqlength 1 \
            --fasta_width 0
        vsearch --cluster_size {output.unmatched} \
            --biomout {output.denovo} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --qmask none \
            --xsize \
            --minseqlength 1 \
            --fasta_width 0
        """

rule biom_to_list:
    input:
        code="code/biom_to_list.R",
        biom="results/{dataset}/{method}/{dataset_ref_region}.biom"
    output:
        list="results/{dataset}/{method}/{dataset_ref_region}.list"
    script:
        "code/biom_to_list.R"

rule combine_open_lists: # TODO: bind cols & relabel OTUs
    input:
        l1='results/{dataset}/open/{dataset_ref_region}.closed.list',
        l2='results/{dataset}/open/{dataset_ref_region}.denovo.list',
        py='code/combine_open_lists.py'
    output:
        list='results/{dataset}/open/{dataset_ref_region}.list'
    script:
        'code/combine_open_lists.py'

rule sensspec_vsearch:
    input:
        list="results/{dataset}/{method}/{dataset_ref_region}.list",
        count=rules.prep_count_table_mothur.output.count,
        dist=prep_samples("results/{dataset}/{dataset}.dist") # TODO: need different dist file for reference clustering
    output:
        tsv='results/{dataset}/{method}/{dataset_ref_region}.sensspec'
    params:
        outdir='results/{dataset}/{method}/'
    benchmark:
        'benchmarks/{dataset}/sensspec.method_{method}.{dataset_ref_region}.txt'
    log:
        'log/{dataset}/sensspec.method_{method}.{dataset_ref_region}.txt'
    shell:
        """
        mothur '#set.logfile(name={log}); set.dir(output={params.outdir});
            sens.spec(list={input.list}, count={input.count}, column={input.dist}) '
        """

rule calc_diversity4:
    input:
        list="results/{dataset}/{method}/{dataset_ref_region}.list",
        count=rules.prep_count_table_mothur.output.count,
    output:
        tsv='results/{dataset}/{method}/{dataset_ref_region}.groups.summary'
    params:
        outdir="results/{dataset}/{method}/"
    log:
        "log/{dataset}/calc_diversity.{dataset_ref_region}.method_{method}.txt"
    resources:
        procs=8
    shell:
        """
        mothur "#set.logfile(name={log}); set.dir(output={params.outdir});
        # TODO: get seqs from listfile and trim count file
        list.seqs(list={input.list});
        get.seqs(count={input.count}, accnos=current);
        make.shared(list={input.list}, count=current, label=0.03);
        summary.single(shared=current, calc=nseqs-sobs-npshannon-invsimpson) "
        """

rule reformat_vsearch_results:
    input:
        R="code/reformat_vsearch_results.R",
        fcns='../../code/R/functions.R',
        bench='benchmarks/{dataset}/vsearch.method_{method}.{dataset_ref_region}.txt',
        sensspec=rules.sensspec_vsearch.output.tsv,
        div=rules.calc_diversity4.output.tsv
    output:
        tsv='results/{dataset}/{method}/results.{dataset_ref_region}.tsv'
    script: # TODO: aggregate benchmarks, sensspec, & diversity files
        "code/reformat_vsearch_results.R" # TODO: use wildcards object to get ref, region etc

