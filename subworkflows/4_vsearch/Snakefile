configfile: '../../config/config.yaml'

datasets = config['datasets']
refs = config['references']
methods = config['methods']

regions = ['bact_v4']
perc_identity = 0.97  # to match mothur's 0.3 dissimilarity threshold

wildcard_constraints:
    region='bact_v4'

subworkflow prep_samples:
    workdir:
        "../1_prep_samples/"
subworkflow fit_ref_db:
    workdir:
        "../2_fit_reference_db/"

rule targets_vsearch:
    input:
        expand('results/{dataset}/de_novo/{dataset}.{ext}',
            dataset = datasets,
            ext = ['biom', 'tsv']
        )

rule remove_gaps_query:
    input:
        fna=prep_samples("data/{dataset}/processed/{dataset}.fasta")
    output:
        degap=temp("data/{dataset}/{dataset}.tmp.fasta"),
        fna="data/{dataset}/{dataset}.ng.fasta"
    params:
        outdir="data/{dataset}/",
        prefix='{dataset}.tmp'
    resources:
        procs=4
    shell:
        """
        mothur '#set.dir(output={params.outdir});
            degap.seqs(fasta={input.fna}, processors={resources.procs});
            rename.file(fasta=current, prefix={params.prefix}) '
        # vsearch doesn't support dots in fasta headers
        cat {output.degap} | sed 's/\./_/g' > {output.fna}
        """

rule remove_gaps_ref:
    input:
        fna=fit_ref_db("data/{dataset}_{ref}_{region}/preclust_db/{ref}.{region}.filter.unique.precluster.fasta")
    output:
        degap=temp("data/{dataset}/{ref}_{region}.tmp.fasta"),
        fna="data/{dataset}/{ref}_{region}.ng.fasta"
    params:
        outdir="data/{dataset}/",
        prefix='{ref}_{region}.tmp'
    resources:
        procs=4
    shell:
        """
        mothur '#set.dir(output={params.outdir});
            degap.seqs(fasta={input.fna}, processors={resources.procs});
            rename.file(fasta=current, prefix={params.prefix}) '
        # vsearch doesn't support dots in fasta headers
        cat {output.degap} | sed 's/\./_/g' > {output.fna}
        """

rule prep_count_table_mothur:
    input:
        count=prep_samples("data/{dataset}/processed/{dataset}.count_table"),
        code="../../code/R/mutate_ref_count.R"
    output:
        count='data/{dataset}/{dataset}.count_table'
    script:
        "../../code/R/mutate_ref_count.R"

rule vsearch_de_novo:
    input:
        query=rules.remove_gaps_query.output.fna
    output:
        biom='results/{dataset}/de_novo/{dataset}.biom'
    params:
        perc_identity=perc_identity
    resources:
        procs=8
    shell:
        """
        vsearch --cluster_size {input.query} \
            --biomout {output.biom} \
            --threads {resources.procs} \
            --id {params.perc_identity} \
            --relabel OTU_ \
            --relabel_keep \
            --qmask none \
            --xsize \
            --minseqlength 1 \
            --fasta_width 0 \
        """

rule vsearch_closed_ref:
    input:
        query=rules.remove_gaps_query.output.fna,
        ref=rules.remove_gaps_ref.output.fna

rule vsearch_open_ref:
    input:
        query=rules.remove_gaps_query.output.fna,
        ref=rules.remove_gaps_ref.output.fna

rule biom_to_tsv:
    input:
        biom="results/{dataset}/de_novo/{dataset}.biom"
    output:
        tsv="results/{dataset}/de_novo/{dataset}.tsv"
    shell:
        """
        biom convert -i {input.biom} -o {output.tsv} --to-tsv
        """

rule make_list: # TODO: create list file from vsearch uc output
    input:
        tsv='{input_dir}/{dataset}_clusters.tsv'
    output:
        list='{input_dir}/{dataset}_clusters.list'

# TODO: mothur sens.spec on vsearch output for performance metrics
rule sensspec_vsearch:
    input:
        list=rules.make_list.output.list,
        count=rules.prep_count_table_mothur.output.count,
        dist=prep_samples("results/{dataset}/{dataset}.dist")
    output:
        tsv='{input_dir}/{dataset}.sensspec'
    params:
        outdir='{input_dir}/'
    shell:
        """
        mothur '#set.dir(output={params.outdir});
            sens.spec(list={input.list}, count={input.count}, column={input.dist}) '
        """

# TODO: aggregate benchmarks
